// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act101Info {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub state: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101InfosRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Get101InfosReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<Act101Info>,
    #[prost(uint32, optional, tag = "2")]
    pub login_count: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101BonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub id: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101BonusReply {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityInfo {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub end_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "4")]
    pub online: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub is_new_stage: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub current_stage: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityNewStageReadRequest {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityNewStageReadReply {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndActivityPush {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActivityInfosReply {
    #[prost(message, repeated, tag = "1")]
    pub activity_infos: ::prost::alloc::vec::Vec<ActivityInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateActivityPush {
    #[prost(message, optional, tag = "1")]
    pub activity_info: ::core::option::Option<ActivityInfo>,
    #[prost(int32, optional, tag = "2")]
    pub time: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureTaskSubmitReply {
    #[prost(int32, optional, tag = "1")]
    pub task_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureGeneralRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureForeverInfo {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub interact_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub finish_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureGateRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureGateReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub adventure_info: ::core::option::Option<AdventureInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureInteractSetStatusRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub status: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureInteractSetStatusReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub status: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureMagicReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureInfo {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub posy: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub interact: ::prost::alloc::vec::Vec<AdventureInteract>,
    #[prost(message, repeated, tag = "6")]
    pub map_backpack: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(message, repeated, tag = "7")]
    pub task_infos: ::prost::alloc::vec::Vec<AdventureTask>,
    #[prost(message, repeated, tag = "8")]
    pub area_sights: ::prost::alloc::vec::Vec<AdventureAreaSight>,
    #[prost(int32, optional, tag = "9")]
    pub last_interact_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub last_interact: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "11")]
    pub battle_infos: ::prost::alloc::vec::Vec<AdventureBattleInfo>,
    #[prost(message, repeated, tag = "12")]
    pub hero_hps: ::prost::alloc::vec::Vec<AdventureHeroHp>,
    #[prost(int32, repeated, packed = "false", tag = "13")]
    pub buff_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "14")]
    pub hero_group_snapshot: ::core::option::Option<HeroGroupInfo>,
    #[prost(int32, optional, tag = "15")]
    pub magic_random_seed: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "16")]
    pub un_select_buff_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureHeroHp {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub hp: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub buff: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureInteractClientFinishRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureBattleReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "4")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureStoryRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureBuffRandomPush {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub buff_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureInteract {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub status: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub interact: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureBattleMonsterHp {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub hp: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAdventurePush {
    #[prost(message, optional, tag = "1")]
    pub adventure_info: ::core::option::Option<AdventureInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureBattleInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub monster_hps: ::prost::alloc::vec::Vec<AdventureBattleMonsterHp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureTaskUpdatePush {
    #[prost(message, repeated, tag = "1")]
    pub task_infos: ::prost::alloc::vec::Vec<AdventureTask>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureTask {
    #[prost(int32, optional, tag = "1")]
    pub task_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub progress: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub has_get_bonus: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub is_finish: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureSeat {
    #[prost(int32, optional, tag = "1")]
    pub area_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub y: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureAreaSight {
    #[prost(int32, optional, tag = "1")]
    pub area_id: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub sight: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "3")]
    pub visible: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureTaskSubmitRequest {
    #[prost(int32, optional, tag = "1")]
    pub task_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub material_data: ::prost::alloc::vec::Vec<MaterialData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureBuffReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub select_buff: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureBattleRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureSetAreaVisibleReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub area_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub visible: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureSetAreaVisibleRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub area_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub visible: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureBuffRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub select_buff: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureGeneralReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAdventureInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub adventure_info: ::prost::alloc::vec::Vec<AdventureInfo>,
    #[prost(message, repeated, tag = "12")]
    pub forever_infos: ::prost::alloc::vec::Vec<AdventureForeverInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureRespawnReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdventureMoveRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub posy: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub sight_change: ::prost::alloc::vec::Vec<AdventureSeat>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureStoryReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureMagicRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdventureRespawnRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetBannerNotShowReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBannerInfoReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub not_show_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetBannerNotShowRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBpInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub score: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub pay_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub start_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub end_time: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "6")]
    pub task_info: ::prost::alloc::vec::Vec<Task>,
    #[prost(message, repeated, tag = "7")]
    pub score_bonus_info: ::prost::alloc::vec::Vec<BpScoreBonusInfo>,
    #[prost(int32, optional, tag = "8")]
    pub weekly_score: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "9")]
    pub first_show: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpScoreUpdatePush {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub score: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub weekly_score: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpScoreBonusInfo {
    #[prost(int32, optional, tag = "1")]
    pub level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub has_getfree_bonus: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub has_get_pay_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBpBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub pay_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpPayPush {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub pay_status: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBpInfoRequest {
    #[prost(bool, optional, tag = "1")]
    pub get_task: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBpBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub score_bonus_info: ::prost::alloc::vec::Vec<BpScoreBonusInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpBuyLevelReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub score: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpMarkFirstShowReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpBuyLevelRequset {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub num: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpMarkFirstShowRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonthCardBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChargeInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<ChargeInfo>,
    #[prost(bool, optional, tag = "2")]
    pub sandbox_enable: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub sandbox_balance: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewOrderReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub pass_back_param: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub notify_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "4")]
    pub game_order_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "5")]
    pub timestamp: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "6")]
    pub sign: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "7")]
    pub server_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "8")]
    pub currency: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrderCompletePush {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub game_order_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewOrderRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub origin_currency: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub origin_amount: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SandboxChargeRequset {
    #[prost(int64, optional, tag = "1")]
    pub game_order_id: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChargeInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub buy_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SandboxChargeReply {
    #[prost(int64, optional, tag = "1")]
    pub game_order_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub sandbox_balance: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadChargeNewRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub goods_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMonthCardInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<MonthCardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadChargeNewReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub goods_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonthCardInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub expire_time: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub has_get_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonthCardBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMsgPush {
    #[prost(message, repeated, tag = "1")]
    pub msg: ::prost::alloc::vec::Vec<ChatMsg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportRequest {
    #[prost(uint64, optional, tag = "1")]
    pub reported_user_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub report_type_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReportTypeReply {
    #[prost(message, repeated, tag = "1")]
    pub report_types: ::prost::alloc::vec::Vec<ReportType>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMsgReply {
    #[prost(string, optional, tag = "1")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub channel_type: ::core::option::Option<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMsgRequest {
    #[prost(uint32, optional, tag = "1")]
    pub channel_type: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub recipient_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportType {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub desc: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMsg {
    #[prost(uint64, optional, tag = "1")]
    pub msg_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub channel_type: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub sender_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub sender_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub portrait: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "6")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "7")]
    pub send_time: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "8")]
    pub level: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "9")]
    pub recipient_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetServerTimeReply {
    #[prost(uint64, optional, tag = "1")]
    pub server_time: ::core::option::Option<u64>,
    #[prost(int64, optional, tag = "2")]
    pub offset_time: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyPowerReply {
    #[prost(int32, optional, tag = "1")]
    pub can_buy_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeDiamondReply {
    #[prost(int32, optional, tag = "1")]
    pub exchange_diamond: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub op_type: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Currency {
    #[prost(uint32, optional, tag = "1")]
    pub currency_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub quantity: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub last_recover_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub expired_time: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBuyPowerInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub can_buy_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CurrencyChangePush {
    #[prost(message, repeated, tag = "1")]
    pub change_currency: ::prost::alloc::vec::Vec<Currency>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeDiamondRequest {
    #[prost(int32, optional, tag = "1")]
    pub exchange_diamond: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub op_type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurrencyListRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub currency_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurrencyListReply {
    #[prost(message, repeated, tag = "1")]
    pub currency_list: ::prost::alloc::vec::Vec<Currency>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserDungeon {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub star: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub challenge_count: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub has_record: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub left_return_all_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub today_pass_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub today_total_num: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserChapterTypeNum {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub today_pass_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub today_total_num: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndDungeonPush {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub player_exp: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub first_bonus: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(message, repeated, tag = "5")]
    pub normal_bonus: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(int32, optional, tag = "6")]
    pub star: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "7")]
    pub advenced_bonus: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(bool, optional, tag = "8")]
    pub update_dungeon_record: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub can_update_dungeon_record: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "10")]
    pub old_record_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub new_record_round: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "12")]
    pub first_pass: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InstructionDungeonRewardRequest {
    #[prost(int32, optional, tag = "1")]
    pub topic_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DungeonLastHeroGroup {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub hero_group_snapshot: ::core::option::Option<HeroGroupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DungeonUpdatePush {
    #[prost(message, optional, tag = "1")]
    pub dungeon_info: ::core::option::Option<UserDungeon>,
    #[prost(message, repeated, tag = "2")]
    pub chapter_type_nums: ::prost::alloc::vec::Vec<UserChapterTypeNum>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructionDungeonOpenRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub open_id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipSpDungeonUpdatePush {
    #[prost(bool, optional, tag = "1")]
    pub is_delete: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "2")]
    pub chapter_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEpisodeHeroRecommendRequest {
    #[prost(int32, optional, tag = "1")]
    pub episode_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapElementReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub dialog_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CoverDungeonRecordReply {
    #[prost(bool, optional, tag = "1")]
    pub is_cover: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChapterMapUpdatePush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub map_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructionDungeonInfoPush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub unlock_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub get_reward_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "3")]
    pub get_final_reward: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub open_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapElementRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub dialog_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPointRewardReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CoverDungeonRecordRequest {
    #[prost(bool, optional, tag = "1")]
    pub is_cover: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartDungeonReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EpisodeHeroRecommendInfo {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub infos: ::prost::alloc::vec::Vec<HeroRecommendInfo>,
    #[prost(float, optional, tag = "3")]
    pub rate: ::core::option::Option<f32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RewardPointUpdatePush {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub value: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroRecommendInfo {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub sub_hero_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "3")]
    pub cloth: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "4")]
    pub rate: ::core::option::Option<f32>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub levels: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndDungeonRequest {
    #[prost(bool, optional, tag = "1")]
    pub is_abort: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PuzzleFinishRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RewardPointInfo {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub reward_point: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub has_get_point_reward_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PuzzleFinishReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChapterMapElementUpdatePush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub elements: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPointRewardRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEpisodeHeroRecommendReply {
    #[prost(message, repeated, tag = "1")]
    pub racommends: ::prost::alloc::vec::Vec<EpisodeHeroRecommendInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartDungeonRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub fight_group: ::core::option::Option<FightGroup>,
    #[prost(int32, optional, tag = "4")]
    pub multiplication: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub use_record: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub is_restart: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructionDungeonInfoReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub unlock_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub get_reward_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "3")]
    pub get_final_reward: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub open_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDungeonReply {
    #[prost(message, repeated, tag = "1")]
    pub dungeon_info_list: ::prost::alloc::vec::Vec<UserDungeon>,
    #[prost(message, repeated, tag = "2")]
    pub last_hero_group: ::prost::alloc::vec::Vec<DungeonLastHeroGroup>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub map_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub elements: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "5")]
    pub reward_point_info: ::prost::alloc::vec::Vec<RewardPointInfo>,
    #[prost(int32, repeated, packed = "false", tag = "6")]
    pub equip_sp_chapters: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "7")]
    pub chapter_type_nums: ::prost::alloc::vec::Vec<UserChapterTypeNum>,
    #[prost(int32, repeated, packed = "false", tag = "8")]
    pub finish_elements: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "9")]
    pub finish_puzzles: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipDeletePush {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipLockRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "2")]
    pub lock: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipRefineRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub eat_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipDecomposeReply {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub equip_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipStrengthenReply {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub eat_equips: ::prost::alloc::vec::Vec<EatEquip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipComposeRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub equip_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEquipInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub equips: ::prost::alloc::vec::Vec<Equip>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipLockReply {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "2")]
    pub lock: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipBreakRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipUpdatePush {
    #[prost(message, repeated, tag = "1")]
    pub equips: ::prost::alloc::vec::Vec<Equip>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Equip {
    #[prost(int32, optional, tag = "1")]
    pub equip_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub exp: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub break_lv: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub count: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8")]
    pub is_lock: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "9")]
    pub refine_lv: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipStrengthenRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub eat_equips: ::prost::alloc::vec::Vec<EatEquip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipDecomposeRequest {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub equip_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EatEquip {
    #[prost(int64, optional, tag = "1")]
    pub eat_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipComposeReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub equip_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipRefineReply {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub eat_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartExplorePush {
    #[prost(message, optional, tag = "1")]
    pub explore_info: ::core::option::Option<ExploreInfoNo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetExploreSimpleInfoReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub chapter_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub interact_num: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreInteractSetStepRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreSetAreaVisibleReply {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub area_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub visible: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreForeverInfoNo {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub interact_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub finish_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreItemInteractReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "3")]
    pub interacts: ::prost::alloc::vec::Vec<ExploreInteractNo>,
    #[prost(message, repeated, tag = "4")]
    pub delete_interacts: ::prost::alloc::vec::Vec<ExploreInteractNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterChapterRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInteractReply {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "4")]
    pub data_list: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(message, repeated, tag = "5")]
    pub interacts: ::prost::alloc::vec::Vec<ExploreInteractNo>,
    #[prost(message, repeated, tag = "6")]
    pub delete_interacts: ::prost::alloc::vec::Vec<ExploreInteractNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreInteractSetStatusRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub status: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreItemChangePush {
    #[prost(message, repeated, tag = "1")]
    pub explore_items: ::prost::alloc::vec::Vec<ExploreItemNo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInteractSetStatus2Reply {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub status2: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreUseItemRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub posy: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub interact_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreSeatNo {
    #[prost(int32, optional, tag = "1")]
    pub area_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub y: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInteractRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreMapNo {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub posy: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub interacts: ::prost::alloc::vec::Vec<ExploreInteractNo>,
    #[prost(message, repeated, tag = "5")]
    pub area_sights: ::prost::alloc::vec::Vec<ExploreAreaSightNo>,
    #[prost(int32, optional, tag = "6")]
    pub last_interact_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub last_interact: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub bonus_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub gold_coin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub purple_coin: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetExploreInfoReply {
    #[prost(message, optional, tag = "1")]
    pub explore_info: ::core::option::Option<ExploreInfoNo>,
    #[prost(message, repeated, tag = "2")]
    pub forever_infos: ::prost::alloc::vec::Vec<ExploreForeverInfoNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreInteractSetStatusReply {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub status: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreItemInteractRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInteractNo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub status: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub status2: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub step: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub posy: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub dir: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeMapRequest {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub posy: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreUseItemReply {
    #[prost(message, repeated, tag = "1")]
    pub interacts: ::prost::alloc::vec::Vec<ExploreInteractNo>,
    #[prost(message, repeated, tag = "2")]
    pub delete_interacts: ::prost::alloc::vec::Vec<ExploreInteractNo>,
    #[prost(int64, optional, tag = "3")]
    pub use_item_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreItemNo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub quantity: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub status: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreAreaSightNo {
    #[prost(int32, optional, tag = "1")]
    pub area_id: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub sight: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "3")]
    pub visible: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeMapReply {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub posy: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "4")]
    pub explore_info: ::core::option::Option<ExploreInfoNo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInteractSetStatus2Request {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub status2: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreMoveRequest {
    #[prost(int32, optional, tag = "1")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub posy: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub sight_change: ::prost::alloc::vec::Vec<ExploreSeatNo>,
    #[prost(int32, optional, tag = "4")]
    pub interact_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreSetAreaVisibleRequest {
    #[prost(int32, optional, tag = "1")]
    pub area_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub visible: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInfoNo {
    #[prost(message, optional, tag = "1")]
    pub explore_map: ::core::option::Option<ExploreMapNo>,
    #[prost(message, optional, tag = "2")]
    pub hero_group_snapshot: ::core::option::Option<HeroGroupInfo>,
    #[prost(message, repeated, tag = "3")]
    pub explore_items: ::prost::alloc::vec::Vec<ExploreItemNo>,
    #[prost(int64, optional, tag = "4")]
    pub use_item_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterChapterReply {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub explore_info: ::core::option::Option<ExploreInfoNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreInteractSetStepReply {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MoveCardOper {
    #[prost(int32, optional, tag = "1")]
    pub from_position: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub to_position: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRecord {
    #[prost(int64, optional, tag = "1")]
    pub fight_id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    pub fight_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "3")]
    pub fight_time: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub fight_result: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub attack_statistics: ::prost::alloc::vec::Vec<FightStatistics>,
    #[prost(message, repeated, tag = "6")]
    pub defense_statistics: ::prost::alloc::vec::Vec<FightStatistics>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightExPointInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub ex_point: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRound {
    #[prost(message, repeated, tag = "1")]
    pub fight_step: ::prost::alloc::vec::Vec<FightStep>,
    #[prost(int32, optional, tag = "2")]
    pub act_point: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_finish: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub move_num: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub ex_point_info: ::prost::alloc::vec::Vec<FightExPointInfo>,
    #[prost(message, repeated, tag = "6")]
    pub ai_use_cards: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(int32, optional, tag = "7")]
    pub power: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "8")]
    pub skill_infos: ::prost::alloc::vec::Vec<PlayerSkillInfo>,
    #[prost(message, repeated, tag = "9")]
    pub before_cards1: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "10")]
    pub team_a_cards1: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "11")]
    pub before_cards2: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "12")]
    pub team_a_cards2: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "13")]
    pub next_round_begin_step: ::prost::alloc::vec::Vec<FightStep>,
    #[prost(int32, repeated, packed = "false", tag = "14")]
    pub use_card_list: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "15")]
    pub begin_ex_point_info: ::prost::alloc::vec::Vec<FightExPointInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrialHero {
    #[prost(int32, optional, tag = "1")]
    pub trial_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub pos: ::core::option::Option<i32>,
    #[prost(int64, repeated, packed = "false", tag = "3")]
    pub equip_uid: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightGroupRecord {
    #[prost(message, repeated, tag = "1")]
    pub hero_list: ::prost::alloc::vec::Vec<FightHeroRecord>,
    #[prost(message, repeated, tag = "2")]
    pub sub_hero_list: ::prost::alloc::vec::Vec<FightHeroRecord>,
    #[prost(int32, optional, tag = "3")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub equips: ::prost::alloc::vec::Vec<FightEquipRecord>,
    #[prost(message, repeated, tag = "5")]
    pub trial_hero_list: ::prost::alloc::vec::Vec<TrialHeroRecord>,
    #[prost(message, repeated, tag = "6")]
    pub activity104_equips: ::prost::alloc::vec::Vec<FightActivity104EquipRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuffInfo {
    #[prost(int32, optional, tag = "1")]
    pub buff_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub duration: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "3")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub ex_info: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "5")]
    pub from_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "6")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseCardStatistics {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub use_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerSkillInfo {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub cd: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub need_power: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipRecord {
    #[prost(int64, optional, tag = "1")]
    pub equip_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub equip_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub equip_lv: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub refine_lv: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightTeam {
    #[prost(message, repeated, tag = "1")]
    pub entitys: ::prost::alloc::vec::Vec<FightEntityInfo>,
    #[prost(message, repeated, tag = "2")]
    pub sub_entitys: ::prost::alloc::vec::Vec<FightEntityInfo>,
    #[prost(int32, optional, tag = "3")]
    pub power: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub skill_infos: ::prost::alloc::vec::Vec<PlayerSkillInfo>,
    #[prost(message, repeated, tag = "6")]
    pub sp_entitys: ::prost::alloc::vec::Vec<FightEntityInfo>,
    #[prost(message, repeated, tag = "7")]
    pub indicators: ::prost::alloc::vec::Vec<IndicatorInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightActivity104EquipRecord {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub activity104_equip_records: ::prost::alloc::vec::Vec<Activity104EquipRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightStatistics {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub harm: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub hurt: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub heal: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "5")]
    pub cards: ::prost::alloc::vec::Vec<UseCardStatistics>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightEquip {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub equip_uid: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightHeroRecord {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub skin: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Activity104EquipRecord {
    #[prost(int64, optional, tag = "1")]
    pub equip_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub equip_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightEntityInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub model_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub skin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub position: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub entity_type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "6")]
    pub user_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "7")]
    pub ex_point: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub current_hp: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "10")]
    pub attr: ::core::option::Option<HeroAttribute>,
    #[prost(message, repeated, tag = "11")]
    pub buffs: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(int32, repeated, packed = "false", tag = "12")]
    pub skill_group1: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "13")]
    pub skill_group2: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "14")]
    pub passive_skill: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "15")]
    pub ex_skill: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "16")]
    pub shield_value: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "17")]
    pub no_effect_buffs: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(int32, optional, tag = "18")]
    pub expoint_max_add: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "19")]
    pub buff_harm_statistic: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BeginRoundOper {
    #[prost(int32, optional, tag = "1")]
    pub oper_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub param1: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub param2: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "4")]
    pub to_id: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CardInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub card_effect: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightStep {
    #[prost(enumeration = "ActType", optional, tag = "1")]
    pub act_type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub to_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub act_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub act_effect: ::prost::alloc::vec::Vec<ActEffect>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IndicatorInfo {
    #[prost(int32, optional, tag = "1")]
    pub inticator_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub num: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActEffect {
    #[prost(int64, optional, tag = "1")]
    pub target_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub effect_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub effect_num: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "4")]
    pub buff: ::core::option::Option<BuffInfo>,
    #[prost(message, optional, tag = "5")]
    pub entity: ::core::option::Option<FightEntityInfo>,
    #[prost(int32, optional, tag = "6")]
    pub config_effect: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub buff_act_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "8")]
    pub reserve_id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "9")]
    pub reserve_str: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TargetInfo {
    #[prost(int32, optional, tag = "1")]
    pub card_index: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub to_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightGroup {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub hero_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub sub_hero_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int32, optional, tag = "3")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub equips: ::prost::alloc::vec::Vec<FightEquip>,
    #[prost(message, repeated, tag = "5")]
    pub trial_hero_list: ::prost::alloc::vec::Vec<TrialHero>,
    #[prost(message, repeated, tag = "6")]
    pub activity104_equips: ::prost::alloc::vec::Vec<FightEquip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrialHeroRecord {
    #[prost(int32, optional, tag = "1")]
    pub trial_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub pos: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub equip_records: ::prost::alloc::vec::Vec<EquipRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseClothSkillRound {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub to_id: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "4")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fight {
    #[prost(message, optional, tag = "1")]
    pub attacker: ::core::option::Option<FightTeam>,
    #[prost(message, optional, tag = "2")]
    pub defender: ::core::option::Option<FightTeam>,
    #[prost(int32, optional, tag = "3")]
    pub cur_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub max_round: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub is_finish: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub cur_wave: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub battle_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightReason {
    #[prost(enumeration = "FightType", optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub battle_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub multiplication: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "5")]
    pub data: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightEquipRecord {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub equip_records: ::prost::alloc::vec::Vec<EquipRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRoundRecord {
    #[prost(message, repeated, tag = "1")]
    pub cloth_skills: ::prost::alloc::vec::Vec<UseClothSkillRound>,
    #[prost(message, repeated, tag = "2")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
    #[prost(message, optional, tag = "3")]
    pub round: ::core::option::Option<FightRound>,
    #[prost(bool, optional, tag = "4")]
    pub new_wave: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndFightPush {
    #[prost(message, optional, tag = "1")]
    pub record: ::core::option::Option<FightRecord>,
    #[prost(message, optional, tag = "2")]
    pub fight_group_a: ::core::option::Option<FightGroup>,
    #[prost(bool, optional, tag = "3")]
    pub is_record: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestFightRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub group_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "2")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReconnectFightReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub last_round: ::core::option::Option<FightRound>,
    #[prost(message, optional, tag = "3")]
    pub fight_reason: ::core::option::Option<FightReason>,
    #[prost(message, optional, tag = "4")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseClothSkillReply {
    #[prost(message, optional, tag = "1")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRoundOperRecord {
    #[prost(message, repeated, tag = "1")]
    pub cloth_skill_opers: ::prost::alloc::vec::Vec<UseClothSkillOperRecord>,
    #[prost(message, repeated, tag = "2")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoRoundReply {
    #[prost(message, repeated, tag = "1")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndFightRequest {
    #[prost(bool, optional, tag = "1")]
    pub is_abort: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RedealCardInfoPush {
    #[prost(message, repeated, tag = "1")]
    pub card_group: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "2")]
    pub deal_card_group: ::prost::alloc::vec::Vec<CardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeSubHeroRequest {
    #[prost(int64, required, tag = "1")]
    pub sub_hero_id: i64,
    #[prost(int64, required, tag = "2")]
    pub change_hero_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFightRecordGroupReply {
    #[prost(message, optional, tag = "1")]
    pub fight_group: ::core::option::Option<FightGroupRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestFightReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestFightIdReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeginRoundRequest {
    #[prost(message, repeated, tag = "1")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
    #[prost(bool, optional, tag = "2")]
    pub auto_oper: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightWavePush {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeginFightRequest {
    #[prost(message, optional, tag = "1")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MoveCardRequest {
    #[prost(int32, optional, tag = "1")]
    pub from_position: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub to_position: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeginRoundReply {
    #[prost(message, optional, tag = "1")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TeamInfoPush {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(bool, optional, tag = "2")]
    pub is_gm: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRoundRecordAll {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
    #[prost(message, repeated, tag = "3")]
    pub records: ::prost::alloc::vec::Vec<FightRoundRecord>,
    #[prost(message, optional, tag = "4")]
    pub fight_record: ::core::option::Option<FightRecord>,
    #[prost(int32, optional, tag = "5")]
    pub result: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub result_cause: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub total_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub kill_total: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "9")]
    pub push_info: ::core::option::Option<CardInfoPush>,
    #[prost(message, repeated, tag = "10")]
    pub wave_push_fight: ::prost::alloc::vec::Vec<Fight>,
    #[prost(message, repeated, tag = "12")]
    pub redeal_infos: ::prost::alloc::vec::Vec<RedealCardInfoPush>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFightRecordGroupRequest {
    #[prost(int32, optional, tag = "1")]
    pub episode_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CardInfoPush {
    #[prost(message, repeated, tag = "1")]
    pub card_group: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(int32, optional, tag = "2")]
    pub act_point: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub move_num: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub before_cards: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "5")]
    pub deal_card_group: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(int32, optional, tag = "6")]
    pub extra_move_act: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestFightIdRequest {
    #[prost(int32, optional, tag = "1")]
    pub fight_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseClothSkillRequest {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub to_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoRoundRequest {
    #[prost(message, repeated, tag = "1")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFightOperReply {
    #[prost(message, repeated, tag = "1")]
    pub oper_records: ::prost::alloc::vec::Vec<FightRoundOperRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetRoundReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
    #[prost(message, repeated, tag = "3")]
    pub cards: ::prost::alloc::vec::Vec<CardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeginFightReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseClothSkillOperRecord {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub to_id: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HandleApplyRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub is_agree: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchRequest {
    #[prost(string, optional, tag = "1")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveBlacklistReply {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchReply {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<FriendInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadFriendInfosReply {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub friend_ids: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, repeated, packed = "false", tag = "2")]
    pub black_list_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendInfo {
    #[prost(uint64, optional, tag = "1")]
    pub user_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub level: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub portrait: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "5")]
    pub time: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetApplyListReply {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<FriendInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplyReply {
    #[prost(string, optional, tag = "1")]
    pub messsage: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendInfoListReply {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<FriendInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveFriendReply {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FriendChangePush {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub is_add: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlacklistChangePush {
    #[prost(uint64, optional, tag = "1")]
    pub user_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub change: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBlacklistReply {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<FriendInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddBlacklistReply {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AgreeAllReply {
    #[prost(message, repeated, tag = "1")]
    pub apply_list: ::prost::alloc::vec::Vec<FriendInfo>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub result_code: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddBlacklistRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveBlacklistRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandleApplyReply {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub is_agree: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub messsage: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApplyRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveFriendRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GpuCpuLogRequest {
    #[prost(string, optional, tag = "1")]
    pub gpu: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub cpu: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmRequest {
    #[prost(string, required, tag = "1")]
    pub command_text: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GmReply {
    #[prost(enumeration = "ResultEnum", optional, tag = "1")]
    pub result: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGuideInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub guide_infos: ::prost::alloc::vec::Vec<GuideInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GuideInfo {
    #[prost(int32, required, tag = "1")]
    pub guide_id: i32,
    #[prost(int32, required, tag = "2")]
    pub step_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGuidePush {
    #[prost(message, repeated, tag = "1")]
    pub guide_infos: ::prost::alloc::vec::Vec<GuideInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishGuideRequest {
    #[prost(int32, required, tag = "1")]
    pub guide_id: i32,
    #[prost(int32, required, tag = "2")]
    pub step_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatperElementInfo {
    #[prost(int32, optional, tag = "1")]
    pub element: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub dialog_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HandbookReadRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HandbookReadReply {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Handbook {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_read: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHandbookInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<Handbook>,
    #[prost(message, repeated, tag = "2")]
    pub element_info: ::prost::alloc::vec::Vec<ChatperElementInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetHeroGroupEquipRequest {
    #[prost(int32, optional, tag = "1")]
    pub group_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub equip: ::core::option::Option<HeroGroupEquip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetHeroGroupEquipReply {
    #[prost(int32, optional, tag = "1")]
    pub group_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub equip: ::core::option::Option<HeroGroupEquip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetHeroGroupSnapshotRequest {
    #[prost(int32, optional, tag = "1")]
    pub snapshot_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub snapshot_sub_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHeroGroupListReply {
    #[prost(message, repeated, tag = "1")]
    pub group_info_list: ::prost::alloc::vec::Vec<HeroGroupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateHeroGroupReply {
    #[prost(message, optional, tag = "1")]
    pub group_info: ::core::option::Option<HeroGroupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetHeroGroupSnapshotReply {
    #[prost(int32, optional, tag = "1")]
    pub snapshot_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub snapshot_sub_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateHeroGroupRequest {
    #[prost(message, required, tag = "1")]
    pub group_info: HeroGroupInfo,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateHeroGroupPush {
    #[prost(message, optional, tag = "1")]
    pub group_info: ::core::option::Option<HeroGroupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroGroupEquip {
    #[prost(int32, optional, tag = "1")]
    pub index: ::core::option::Option<i32>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub equip_uid: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SkillInfo {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub max_level: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroAllAttribute {
    #[prost(message, optional, tag = "1")]
    pub base_attr: ::core::option::Option<HeroAttribute>,
    #[prost(message, optional, tag = "2")]
    pub ex_attr: ::core::option::Option<HeroExAttribute>,
    #[prost(message, optional, tag = "3")]
    pub sp_attr: ::core::option::Option<HeroSpAttribute>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroSimpleInfo {
    #[prost(int32, required, tag = "1")]
    pub hero_id: i32,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub ex_skill_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub skin: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroExAttribute {
    #[prost(int32, optional, tag = "1")]
    pub cri: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub recri: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub cri_dmg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub cri_def: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub add_dmg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub drop_dmg: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SkinInfo {
    #[prost(int32, optional, tag = "1")]
    pub skin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub expire_sec: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroSpAttribute {
    #[prost(int32, optional, tag = "1")]
    pub revive: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub heal: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub absorb: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub defense_ignore: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub clutch: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub final_add_dmg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub final_drop_dmg: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TalentCubeInfo {
    #[prost(int32, optional, tag = "1")]
    pub cube_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub direction: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub pos_x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub pos_y: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroInfo {
    #[prost(int64, required, tag = "1")]
    pub uid: i64,
    #[prost(int64, required, tag = "2")]
    pub user_id: i64,
    #[prost(int32, required, tag = "3")]
    pub hero_id: i32,
    #[prost(int64, optional, tag = "4")]
    pub create_time: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "5")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub exp: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub breakthrough: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub skin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub faith: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub active_skill_level: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "12")]
    pub passive_skill_level: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "13")]
    pub ex_skill_level: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "14")]
    pub voice: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "15")]
    pub voice_heard: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "16")]
    pub skin_info_list: ::prost::alloc::vec::Vec<SkinInfo>,
    #[prost(message, optional, tag = "17")]
    pub base_attr: ::core::option::Option<HeroAttribute>,
    #[prost(message, optional, tag = "18")]
    pub ex_attr: ::core::option::Option<HeroExAttribute>,
    #[prost(message, optional, tag = "19")]
    pub sp_attr: ::core::option::Option<HeroSpAttribute>,
    #[prost(message, repeated, tag = "20")]
    pub equip_attr_list: ::prost::alloc::vec::Vec<HeroEquipAttribute>,
    #[prost(bool, optional, tag = "21")]
    pub is_new: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "22")]
    pub item_unlock: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "23")]
    pub talent: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "24")]
    pub talent_cube_infos: ::prost::alloc::vec::Vec<TalentCubeInfo>,
    #[prost(int64, optional, tag = "25")]
    pub default_equip_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroAttribute {
    #[prost(int32, required, tag = "1")]
    pub hp: i32,
    #[prost(int32, required, tag = "2")]
    pub attack: i32,
    #[prost(int32, required, tag = "3")]
    pub defense: i32,
    #[prost(int32, required, tag = "4")]
    pub mdefense: i32,
    #[prost(int32, required, tag = "5")]
    pub technic: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroGroupInfo {
    #[prost(int32, required, tag = "1")]
    pub group_id: i32,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub hero_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub equips: ::prost::alloc::vec::Vec<HeroGroupEquip>,
    #[prost(message, repeated, tag = "6")]
    pub activity104_equips: ::prost::alloc::vec::Vec<HeroGroupEquip>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroEquipAttribute {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub equip_attr: ::core::option::Option<HeroAttribute>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroLevelUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub expect_level: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseSkinReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub skin_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroGainPush {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_first: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub duplicate_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroDefaultEquipRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub default_equip_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroLevelUpReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub new_level: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroRankUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroUpgradeSkillRequest {
    #[prost(int32, required, tag = "1")]
    pub hero_id: i32,
    #[prost(int32, required, tag = "2")]
    pub r#type: i32,
    #[prost(int32, optional, tag = "3")]
    pub consume: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnMarkIsNewReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTouchReply {
    #[prost(int32, optional, tag = "1")]
    pub touch_count_left: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub success: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeoffAllTalentCubeReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTalentUpReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub talent_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroSkinGainPush {
    #[prost(int32, optional, tag = "1")]
    pub skin_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub first_gain: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub get_approach: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTouchRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseSkinRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub skin_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ItemUnlockReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutTalentSchemeReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub cube_infos: ::prost::alloc::vec::Vec<TalentCubeInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutTalentSchemeRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub talent_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub talent_mould: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub star_mould: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnMarkIsNewRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockVoiceRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub voice_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeoffAllTalentCubeRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroBirthdayInfo {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub birthday_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockVoiceReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub voice_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ItemUnlockRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutTalentCubeRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub get_cube_info: ::core::option::Option<TalentCubeInfo>,
    #[prost(message, optional, tag = "3")]
    pub put_cube_info: ::core::option::Option<TalentCubeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroUpdatePush {
    #[prost(message, repeated, tag = "1")]
    pub hero_updates: ::prost::alloc::vec::Vec<HeroInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroRankUpReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub new_rank: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTalentUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroInfoListReply {
    #[prost(message, repeated, tag = "1")]
    pub heros: ::prost::alloc::vec::Vec<HeroInfo>,
    #[prost(int32, optional, tag = "2")]
    pub touch_count_left: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub all_hero_skin: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "4")]
    pub birthday_infos: ::prost::alloc::vec::Vec<HeroBirthdayInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutTalentCubeReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub cube_infos: ::prost::alloc::vec::Vec<TalentCubeInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroDefaultEquipReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub default_equip_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(uint32, optional, tag = "1")]
    pub item_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub quantity: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub last_use_time: ::core::option::Option<u64>,
    #[prost(int64, optional, tag = "4")]
    pub total_gain_count: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PowerItem {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub item_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub quantity: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub expire_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemChangePush {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<Item>,
    #[prost(message, repeated, tag = "2")]
    pub power_items: ::prost::alloc::vec::Vec<PowerItem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetItemListReply {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<Item>,
    #[prost(message, repeated, tag = "2")]
    pub power_items: ::prost::alloc::vec::Vec<PowerItem>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UsePowerItemRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UsePowerItemReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseItemRequest {
    #[prost(message, repeated, tag = "1")]
    pub entry: ::prost::alloc::vec::Vec<M2qEntry>,
    #[prost(uint64, optional, tag = "2")]
    pub target_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewMailPush {
    #[prost(message, optional, tag = "1")]
    pub mail: ::core::option::Option<Mail>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadMailBatchRequest {
    #[prost(uint32, optional, tag = "1")]
    pub r#type: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteMailBatchRequest {
    #[prost(uint32, optional, tag = "1")]
    pub r#type: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadMailReply {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkMailJumpRequest {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMailBatchReply {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub incr_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkMailJumpReply {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadMailRequest {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllMailsReply {
    #[prost(message, repeated, tag = "1")]
    pub mails: ::prost::alloc::vec::Vec<Mail>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mail {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub mail_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub attachment: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub state: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "6")]
    pub create_time: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "7")]
    pub sender: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub copy: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "11")]
    pub expire_time: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "12")]
    pub sender_type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMailsPush {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub incr_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadMailBatchReply {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub incr_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MaterialChangePush {
    #[prost(message, repeated, tag = "1")]
    pub data_list: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(uint32, optional, tag = "2")]
    pub get_approach: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MaterialData {
    #[prost(uint32, optional, tag = "1")]
    pub materil_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub materil_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub quantity: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct M2qEntry {
    #[prost(uint32, optional, tag = "1")]
    pub material_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub quantity: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenInfo {
    #[prost(int32, required, tag = "1")]
    pub id: i32,
    #[prost(bool, required, tag = "2")]
    pub is_open: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateOpenPush {
    #[prost(message, repeated, tag = "1")]
    pub open_infos: ::prost::alloc::vec::Vec<OpenInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimplePlayerInfo {
    #[prost(uint64, optional, tag = "1")]
    pub user_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub portrait: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub is_online: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub zone_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub datetime: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerCloth {
    #[prost(int32, optional, tag = "1")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub exp: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerInfo {
    #[prost(uint64, optional, tag = "1")]
    pub user_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub portrait: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub exp: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub signature: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub birthday: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "8")]
    pub show_heros: ::prost::alloc::vec::Vec<HeroSimpleInfo>,
    #[prost(int64, optional, tag = "9")]
    pub register_time: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "10")]
    pub hero_rare_nn_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub hero_rare_n_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub hero_rare_r_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "13")]
    pub hero_rare_sr_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub hero_rare_ssr_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub last_episode_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "16")]
    pub last_login_time: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "17")]
    pub last_logout_time: ::core::option::Option<i64>,
    #[prost(int32, repeated, packed = "false", tag = "18")]
    pub character_age: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerClothInfo {
    #[prost(message, repeated, tag = "1")]
    pub clothes: ::prost::alloc::vec::Vec<PlayerCloth>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSimplePropertyReply {
    #[prost(message, repeated, tag = "1")]
    pub simple_properties: ::prost::alloc::vec::Vec<SimpleProperty>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetShowHeroUniqueIdsRequest {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub show_hero_unique_ids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetCharacterAgeRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub character_age: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetOtherPlayerInfoRequest {
    #[prost(int64, optional, tag = "1")]
    pub user_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimplePropertyPush {
    #[prost(message, optional, tag = "1")]
    pub simple_property: ::core::option::Option<SimpleProperty>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePlayerReply {
    #[prost(message, optional, tag = "1")]
    pub player_info: ::core::option::Option<PlayerInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPortraitRequest {
    #[prost(int32, optional, tag = "1")]
    pub portrait: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOtherPlayerInfoReply {
    #[prost(message, optional, tag = "1")]
    pub player_info: ::core::option::Option<PlayerInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePlayerRequest {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetCharacterAgeReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub character_age: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RenameReply {
    #[prost(bool, optional, tag = "1")]
    pub can_rename: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "2")]
    pub ext_rename: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerInfoPush {
    #[prost(message, optional, tag = "1")]
    pub player_info: ::core::option::Option<PlayerInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseCdKeyRequset {
    #[prost(string, optional, tag = "1")]
    pub gift_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSignatureRequest {
    #[prost(string, optional, tag = "1")]
    pub signature: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetBirthdayRequest {
    #[prost(string, optional, tag = "1")]
    pub birthday: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ServerResultCodePush {
    #[prost(int32, optional, tag = "1")]
    pub result_code: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenameRequest {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub step_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSimplePropertyRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub property: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerInfoReply {
    #[prost(message, optional, tag = "1")]
    pub player_info: ::core::option::Option<PlayerInfo>,
    #[prost(message, repeated, tag = "2")]
    pub openinfos: ::prost::alloc::vec::Vec<OpenInfo>,
    #[prost(bool, optional, tag = "3")]
    pub can_rename: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub main_thumbnail: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub ext_rename: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClothInfoReply {
    #[prost(message, optional, tag = "1")]
    pub cloth_infos: ::core::option::Option<PlayerClothInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimpleProperty {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub property: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClothUpdatePush {
    #[prost(message, optional, tag = "1")]
    pub update_infos: ::core::option::Option<PlayerClothInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RedDotInfo {
    #[prost(int64, required, tag = "1")]
    pub id: i64,
    #[prost(int32, required, tag = "2")]
    pub value: i32,
    #[prost(int32, optional, tag = "3")]
    pub time: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub ext: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRedDotInfosRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShowRedDotRequest {
    #[prost(int32, optional, tag = "1")]
    pub define_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_visible: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRedDotInfosReply {
    #[prost(message, repeated, tag = "1")]
    pub red_dot_infos: ::prost::alloc::vec::Vec<RedDotGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RedDotGroup {
    #[prost(int32, required, tag = "1")]
    pub define_id: i32,
    #[prost(message, repeated, tag = "2")]
    pub infos: ::prost::alloc::vec::Vec<RedDotInfo>,
    #[prost(bool, optional, tag = "3")]
    pub replace_all: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRedDotPush {
    #[prost(message, repeated, tag = "1")]
    pub red_dot_infos: ::prost::alloc::vec::Vec<RedDotGroup>,
    #[prost(bool, optional, tag = "2")]
    pub replace_all: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnUseBuildingReply {
    #[prost(message, optional, tag = "1")]
    pub building_info: ::core::option::Option<BuildingInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBlockPackageInfoReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub block_package_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub special_blocks: ::prost::alloc::vec::Vec<SpecialBlockInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCharacterInteractionBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub select_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCharacterInteractionBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub select_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnUseBlockRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub block_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HideBuildingReddotReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnUseBuildingRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuildingInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub define_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub r#use: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub y: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub rotate: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoomObInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(message, repeated, tag = "3")]
    pub formula_infos: ::prost::alloc::vec::Vec<FormulaInfo>,
    #[prost(int32, optional, tag = "4")]
    pub room_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
    #[prost(message, repeated, tag = "6")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseBlockRequest {
    #[prost(int32, optional, tag = "1")]
    pub block_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub block_package_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub rotate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub y: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainRoomHeroFaithRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpecialBlockInfo {
    #[prost(int32, optional, tag = "1")]
    pub block_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub create_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoomInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(bool, optional, tag = "2")]
    pub is_reset: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "3")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(message, repeated, tag = "4")]
    pub block_packages: ::prost::alloc::vec::Vec<BlockPackageInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineAccelerateReply {
    #[prost(message, optional, tag = "1")]
    pub production_line: ::core::option::Option<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoomHeroData {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub current_faith: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub next_refresh_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub skin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub current_minute: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FormulaInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRoomHeroDataRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub room_hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HideBuildingReddotRequset {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRoomHeroDataReply {
    #[prost(message, repeated, tag = "1")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseBuildingRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub rotate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub y: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockPackageInfo {
    #[prost(int32, optional, tag = "1")]
    pub block_package_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub un_use_block_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub use_block_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FormulaGainPush {
    #[prost(message, repeated, tag = "1")]
    pub formula_infos: ::prost::alloc::vec::Vec<FormulaInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineLvUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub new_level: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HideBlockPackageReddotReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockPackageGainPush {
    #[prost(message, repeated, tag = "1")]
    pub block_packages: ::prost::alloc::vec::Vec<BlockPackageInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainRoomHeroFaithReply {
    #[prost(message, repeated, tag = "1")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CharacterInteractionInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub finish: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub select_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetRoomReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub block_packages: ::prost::alloc::vec::Vec<BlockPackageInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainProductionLineRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductionLineInfoRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartCharacterInteractionReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomConfirmReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(message, repeated, tag = "3")]
    pub formula_infos: ::prost::alloc::vec::Vec<FormulaInfo>,
    #[prost(int32, optional, tag = "4")]
    pub room_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
    #[prost(message, repeated, tag = "6")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomRevertReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub block_packages: ::prost::alloc::vec::Vec<BlockPackageInfo>,
    #[prost(message, repeated, tag = "3")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineLvUpReply {
    #[prost(message, optional, tag = "1")]
    pub production_line: ::core::option::Option<ProductionLineInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBuildingInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub formula_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub finish_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub next_finish_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub pause_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub level: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainProductionLineReply {
    #[prost(message, repeated, tag = "1")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseBuildingReply {
    #[prost(message, optional, tag = "1")]
    pub building_info: ::core::option::Option<BuildingInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductionLineInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HideBlockPackageReddotRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlockInfo {
    #[prost(int32, optional, tag = "1")]
    pub block_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub y: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub rotate: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuildingGainPush {
    #[prost(message, repeated, tag = "1")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartProductionLineRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub formula_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineAccelerateRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub use_item_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomLevelUpReply {
    #[prost(int32, optional, tag = "1")]
    pub room_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetOtherRoomObInfoRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainSpecialBlockPush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub special_blocks: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseBlockReply {
    #[prost(int32, optional, tag = "1")]
    pub block_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub rotate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub y: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartProductionLineReply {
    #[prost(message, optional, tag = "1")]
    pub production_line: ::core::option::Option<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRoomObInfoRequest {
    #[prost(bool, optional, tag = "1")]
    pub need_block_data: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCharacterInteractionInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<CharacterInteractionInfo>,
    #[prost(int32, optional, tag = "2")]
    pub interaction_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartCharacterInteractionRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnUseBlockReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub block_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOtherRoomObInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(int64, optional, tag = "3")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub room_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
    #[prost(message, repeated, tag = "6")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInAddupReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInHistoryRequest {
    #[prost(int32, optional, tag = "1")]
    pub month: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeroBirthdayRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeroBirthdayReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignInReply {
    #[prost(int32, optional, tag = "1")]
    pub day: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub birthday_hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSignInInfoReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub has_sign_in_days: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "2")]
    pub addup_sign_in_day: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub has_get_addup_bonus: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "4")]
    pub open_function_time: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub has_month_card_days: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "6")]
    pub month_card_history: ::prost::alloc::vec::Vec<MonthCardHistory>,
    #[prost(int32, repeated, packed = "false", tag = "7")]
    pub birthday_hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonthCardHistory {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub start_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub end_time: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInAddupRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignInHistoryReply {
    #[prost(int32, optional, tag = "1")]
    pub month: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub has_sign_in_days: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub has_month_card_days: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub birthday_hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateClientStatBaseInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub account_bind_bonus: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateClientStatBaseInfoRequest {
    #[prost(string, optional, tag = "1")]
    pub info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientStatBaseInfoRequest {
    #[prost(string, optional, tag = "1")]
    pub info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatInfoPush {
    #[prost(bool, optional, tag = "1")]
    pub frist_charge: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "2")]
    pub total_charge_amount: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_first_login: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "4")]
    pub player_info: ::core::option::Option<PlayerInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStoreInfosReply {
    #[prost(message, repeated, tag = "1")]
    pub store_infos: ::prost::alloc::vec::Vec<StoreInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStoreInfosRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub store_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyGoodsRequest {
    #[prost(int32, required, tag = "1")]
    pub store_id: i32,
    #[prost(int32, required, tag = "2")]
    pub goods_id: i32,
    #[prost(int32, required, tag = "3")]
    pub num: i32,
    #[prost(int32, optional, tag = "4")]
    pub select_cost: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyGoodsReply {
    #[prost(int32, required, tag = "1")]
    pub store_id: i32,
    #[prost(int32, required, tag = "2")]
    pub goods_id: i32,
    #[prost(int32, required, tag = "3")]
    pub num: i32,
    #[prost(int32, optional, tag = "4")]
    pub select_cost: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GoodsInfo {
    #[prost(int32, required, tag = "1")]
    pub goods_id: i32,
    #[prost(int32, required, tag = "2")]
    pub buy_count: i32,
    #[prost(int64, optional, tag = "3")]
    pub offline_time: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreInfo {
    #[prost(int32, required, tag = "1")]
    pub id: i32,
    #[prost(int64, required, tag = "2")]
    pub next_refresh_time: i64,
    #[prost(message, repeated, tag = "3")]
    pub goods_infos: ::prost::alloc::vec::Vec<GoodsInfo>,
    #[prost(int64, optional, tag = "4")]
    pub offline_time: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadStoreNewReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub goods_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadStoreNewRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub goods_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStoryFinishRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProcessingStoryInfo {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub favor: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateStoryRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub favor: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStoryFinishReply {
    #[prost(bool, optional, tag = "1")]
    pub is_finish: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoryFinishPush {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStoryReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub finish_list: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub processing_list: ::prost::alloc::vec::Vec<ProcessingStoryInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSummonInfoReply {
    #[prost(bool, optional, tag = "1")]
    pub free_equip_summon: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub is_show_new_summon: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub new_summon_count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub pool_infos: ::prost::alloc::vec::Vec<SummonPoolInfo>,
    #[prost(int32, optional, tag = "5")]
    pub total_summon_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonQueryTokenReply {
    #[prost(string, optional, tag = "1")]
    pub token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonPoolInfo {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub online_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub offline_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonResult {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_new: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub duplicate_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub equip_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub return_materials: ::prost::alloc::vec::Vec<MaterialData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonRequest {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub step_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonReply {
    #[prost(message, repeated, tag = "1")]
    pub summon_result: ::prost::alloc::vec::Vec<SummonResult>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Task {
    #[prost(int32, required, tag = "1")]
    pub id: i32,
    #[prost(int32, required, tag = "2")]
    pub progress: i32,
    #[prost(bool, required, tag = "3")]
    pub has_finished: bool,
    #[prost(int32, optional, tag = "4")]
    pub finish_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub expiry_time: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TaskActivityInfo {
    #[prost(int32, required, tag = "1")]
    pub type_id: i32,
    #[prost(int32, required, tag = "2")]
    pub define_id: i32,
    #[prost(int32, required, tag = "3")]
    pub value: i32,
    #[prost(int32, optional, tag = "4")]
    pub gain_value: ::core::option::Option<i32>,
    #[prost(int32, required, tag = "5")]
    pub expiry_time: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskInfoRequest {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub type_ids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishAllTaskRequest {
    #[prost(int32, optional, tag = "1")]
    pub type_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub min_type_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub task_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTaskActivityBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub type_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub define_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishAllTaskReply {
    #[prost(int32, optional, tag = "1")]
    pub type_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub min_type_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub task_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTaskActivityBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub type_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub define_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTaskPush {
    #[prost(message, repeated, tag = "1")]
    pub task_info: ::prost::alloc::vec::Vec<Task>,
    #[prost(message, repeated, tag = "2")]
    pub activity_info: ::prost::alloc::vec::Vec<TaskActivityInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTaskRequest {
    #[prost(int32, required, tag = "1")]
    pub id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTaskReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub finish_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteTaskPush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub task_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub task_info: ::prost::alloc::vec::Vec<Task>,
    #[prost(message, repeated, tag = "2")]
    pub activity_info: ::prost::alloc::vec::Vec<TaskActivityInfo>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub type_ids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkInfo {
    #[prost(int32, optional, tag = "1")]
    pub time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub end_time: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub map_info: ::prost::alloc::vec::Vec<MapInfo>,
    #[prost(int32, optional, tag = "4")]
    pub max_layer: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub issue_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub is_pop_deep_rule: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub is_open_deep: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub is_pop_shallow_settle: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub is_pop_deep_settle: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "10")]
    pub deep_progress: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetLayerRequest {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub battle_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkGeneralReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkDialogHistoryReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "2")]
    pub historylist: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWeekwalkInfoReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<WeekwalkInfo>,
    #[prost(int32, optional, tag = "2")]
    pub time_this_week: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleInfo {
    #[prost(int32, optional, tag = "1")]
    pub battle_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub star: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub max_star: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkShowFinishedReply {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub scene_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub is_finish: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub is_finished: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub buff_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub is_show_buff: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub is_show_finished: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub is_show_select_cd: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "9")]
    pub battle_infos: ::prost::alloc::vec::Vec<BattleInfo>,
    #[prost(message, repeated, tag = "10")]
    pub element_infos: ::prost::alloc::vec::Vec<WeekwalkElementInfo>,
    #[prost(message, repeated, tag = "11")]
    pub hero_infos: ::prost::alloc::vec::Vec<WeekwalkHeroInfo>,
    #[prost(int32, repeated, packed = "false", tag = "12")]
    pub story_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkShowBuffRequest {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BeforeStartWeekwalkBattleRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectNotCdHeroReply {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub hero_id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkHeroRecommendRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkDialogRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub option: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkShowFinishedRequest {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkShowBuffReply {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkHeroInfo {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub cd: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkGeneralRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkDialogReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub option: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectNotCdHeroRequest {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub hero_id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkHeroRecommendReply {
    #[prost(message, repeated, tag = "1")]
    pub racommends: ::prost::alloc::vec::Vec<EpisodeHeroRecommendInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BeforeStartWeekwalkBattleReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkDialogHistoryRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "2")]
    pub historylist: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkElementInfo {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_finish: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub index: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "4")]
    pub historylist: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "5")]
    pub visible: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetLayerReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<WeekwalkInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkInfoUpdatePush {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<WeekwalkInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MinorPlayTimeOutPush {
    #[prost(int32, optional, tag = "1")]
    pub time_out_hour: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MinorLimitLoginTimePush {
    #[prost(string, optional, tag = "1")]
    pub limit_login_time: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub is_login: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdId {
    LoginCmd = 1,
    LostCmdRespCmd = 3,
    ForceLogoutCmd = 4,
    GetLostCmdRespResponseStartTagCmd = 5,
    Act1000GetInfoCmd = 11844,
    Act1000AccountBindBonusCmd = -8727,
    Get101InfosCmd = -26993,
    Get101BonusCmd = -26057,
    Get104InfosCmd = 30322,
    BeforeStartAct104BattleCmd = -1274,
    Act104BattleFinishPushCmd = -18639,
    Activity104ItemChangePushCmd = 2686,
    RefreshRetailCmd = -14612,
    OptionalActivity104EquipCmd = -1592,
    ComposeActivity104EquipCmd = 984,
    ChangeFightGroupCmd = -7999,
    MarkActivity104StoryCmd = 13866,
    MarkEpisodeAfterStoryCmd = -10333,
    Get106InfosCmd = -2869,
    Get106OrderBonusCmd = -18609,
    Update106OrderPushCmd = 13419,
    Get107GoodsInfoCmd = 7894,
    Buy107GoodsCmd = -21126,
    Get108InfosCmd = -24330,
    ResetMapCmd = 10808,
    DialogEventSelectCmd = -32535,
    EnterFightEventCmd = -14999,
    Get108BonusCmd = -23394,
    EpisodeUpdatePushCmd = 30819,
    InfoUpdatePushCmd = 23622,
    GetAct109InfoCmd = 1846,
    Act109StartEpisodeCmd = -31295,
    Act109BeginRoundCmd = -31881,
    Act109StepPushCmd = 9766,
    Act109UseItemCmd = -5338,
    Act109EventEndCmd = -17629,
    Act109AbortCmd = -11262,
    Act109MarkNewEpisodeRedDotCmd = -8822,
    Get111InfosCmd = 13648,
    FinishEpisodeCmd = -14565,
    Act111InfoPushCmd = 8892,
    PushBoxTaskPushCmd = -24063,
    ReceiveTaskRewardCmd = -18283,
    MarkRedDot1039Cmd = -32204,
    Get112InfosCmd = 32753,
    Exchange112Cmd = -25227,
    Act112TaskPushCmd = 22629,
    ReceiveAct112TaskRewardCmd = -3038,
    Get114InfosCmd = 5427,
    Act114InfoPushCmd = 19490,
    Act114TaskPushCmd = 7849,
    ReceiveAct114TaskRewardCmd = 31526,
    Act114EducateCmd = 3165,
    Act114TravelCmd = 32560,
    Act114MeetingCmd = 1707,
    CheckEventCmd = -2540,
    Act114RestCmd = -22464,
    Act114KeyDayCmd = 9961,
    Act114TestCmd = -16126,
    Act114ResetCmd = -20795,
    BeforeAct114BattleCmd = -27471,
    GetAct115InfoCmd = 28720,
    Act115StartEpisodeCmd = 15835,
    Act115BeginRoundCmd = 27921,
    Act115StepPushCmd = -7872,
    Act115EventEndCmd = 30269,
    Act115AbortCmd = -10916,
    Act115BonusCmd = 2795,
    Act115UseSkillCmd = 8688,
    Act115RevertCmd = 7324,
    Get116InfosCmd = -21899,
    UpgradeElementCmd = -25784,
    BuildTrapCmd = 15069,
    PutTrapCmd = 14118,
    Act117InfoCmd = -29804,
    Act117NegotiateCmd = 14376,
    Act117DealCmd = -22850,
    Act117GetBonusCmd = 5295,
    GetAct120InfoCmd = -22168,
    Act120StartEpisodeCmd = 9363,
    Act120BeginRoundCmd = 17865,
    Act120StepPushCmd = 11256,
    Act120UseItemCmd = 32440,
    Act120EventEndCmd = -16139,
    Act120AbortCmd = 23316,
    GetActivityInfosCmd = -14582,
    UpdateActivityPushCmd = -12293,
    EndActivityPushCmd = 7215,
    ActivityNewStageReadCmd = 2821,
    GetBannerInfoCmd = 20297,
    SetBannerNotShowCmd = -9413,
    GetBpInfoCmd = -5055,
    GetBpBonusCmd = 30844,
    BpScoreUpdatePushCmd = -27276,
    BpPayPushCmd = 4063,
    BpBuyLevelRequsetCmd = 2877,
    BpMarkFirstShowCmd = 28489,
    GetChargeInfoCmd = 31537,
    NewOrderCmd = -5087,
    OrderCompletePushCmd = 7728,
    GetMonthCardInfoCmd = 5799,
    GetMonthCardBonusCmd = -4190,
    SandboxChargeRequsetCmd = 9556,
    ReadChargeNewCmd = 23467,
    SendMsgCmd = -29022,
    DeleteOfflineMsgCmd = -25586,
    ChatMsgPushCmd = -8392,
    GetReportTypeCmd = 27727,
    ReportCmd = 22157,
    GetServerTimeCmd = 24032,
    GetCurrencyListCmd = 20931,
    CurrencyChangePushCmd = 19309,
    GetBuyPowerInfoCmd = -4123,
    BuyPowerCmd = 5177,
    ExchangeDiamondCmd = -20133,
    GetDungeonCmd = -4591,
    DungeonUpdatePushCmd = 6132,
    StartDungeonCmd = 3231,
    EndDungeonCmd = 30408,
    EndDungeonPushCmd = 31240,
    MapElementCmd = 31241,
    ChapterMapUpdatePushCmd = -7127,
    ChapterMapElementUpdatePushCmd = 19027,
    GetPointRewardCmd = 18768,
    GetEpisodeHeroRecommendCmd = -16686,
    EquipSpDungeonUpdatePushCmd = 3355,
    RewardPointUpdatePushCmd = 8595,
    InstructionDungeonRewardCmd = 16056,
    InstructionDungeonFinalRewardCmd = 19970,
    InstructionDungeonInfoCmd = 5087,
    InstructionDungeonInfoPushCmd = 2547,
    InstructionDungeonOpenCmd = 26245,
    CoverDungeonRecordCmd = 12399,
    PuzzleFinishCmd = -31764,
    GetEquipInfoCmd = 15973,
    EquipUpdatePushCmd = -19172,
    EquipDeletePushCmd = -12052,
    EquipStrengthenCmd = -20485,
    EquipBreakCmd = -2,
    EquipLockCmd = 18434,
    EquipComposeCmd = -10161,
    EquipDecomposeCmd = 9144,
    EquipRefineCmd = -1422,
    GetExploreInfoCmd = 29371,
    GetExploreSimpleInfoCmd = -28635,
    EnterChapterCmd = 11829,
    ChangeMapCmd = 6164,
    StartExplorePushCmd = 7709,
    ExploreMoveCmd = 13574,
    ExploreSetAreaVisibleCmd = -20862,
    ExploreInteractSetStatusCmd = 14745,
    ExploreInteractSetStatus2Cmd = 27883,
    ExploreInteractSetStepCmd = 29265,
    ExploreUseItemCmd = -6261,
    ExploreItemChangePushCmd = -188,
    ExploreInteractCmd = -27767,
    ExploreItemInteractCmd = -7016,
    BeginFightCmd = -30438,
    TestFightCmd = -5451,
    TestFightIdCmd = 30146,
    MoveCardCmd = -2028,
    ResetRoundCmd = 17166,
    BeginRoundCmd = 13744,
    EndRoundCmd = -9054,
    ChangeSubHeroCmd = -25567,
    ReconnectFightCmd = 9206,
    CardInfoPushCmd = -19063,
    TeamInfoPushCmd = 5078,
    EndFightCmd = 12300,
    EndFightPushCmd = 13644,
    FightWavePushCmd = 29544,
    UseClothSkillCmd = -9399,
    RedealCardInfoPushCmd = 30262,
    AutoRoundCmd = -3100,
    GetFightOperCmd = -149,
    GetFightRecordGroupCmd = -16575,
    GetApplyListCmd = 28363,
    ApplyCmd = -29265,
    HandleApplyCmd = 16251,
    RejectAllCmd = 17247,
    GetFriendInfoListCmd = -30711,
    AddBlacklistCmd = -13109,
    RemoveBlacklistCmd = -27760,
    RemoveFriendCmd = 19215,
    SearchCmd = -4417,
    GetBlacklistCmd = -15262,
    BlacklistChangePushCmd = -8216,
    AgreeAllCmd = 4486,
    LoadFriendInfosCmd = -25504,
    FriendChangePushCmd = 23207,
    GmCmd = 9762,
    GpuCpuLogCmd = -22917,
    FinishGuideCmd = 18894,
    UpdateGuidePushCmd = -11849,
    GetGuideInfoCmd = 2105,
    GetHandbookInfoCmd = 19177,
    HandbookReadCmd = -29895,
    GetHeroGroupListCmd = -11453,
    UpdateHeroGroupCmd = 31018,
    SetHeroGroupEquipCmd = -27977,
    SetHeroGroupSnapshotCmd = -31069,
    UpdateHeroGroupPushCmd = -8854,
    HeroInfoListCmd = -3787,
    HeroUpdatePushCmd = -25616,
    HeroUpgradeSkillCmd = 18068,
    HeroLevelUpCmd = 24554,
    HeroRankUpCmd = -25186,
    UseSkinCmd = 5793,
    HeroSkinGainPushCmd = -22399,
    UnMarkIsNewCmd = -29069,
    UnlockVoiceCmd = 21281,
    ItemUnlockCmd = 14170,
    HeroGainPushCmd = 15468,
    HeroTouchCmd = -21872,
    HeroTalentUpCmd = 5242,
    PutTalentCubeCmd = -15329,
    TakeoffAllTalentCubeCmd = -20353,
    PutTalentSchemeCmd = 29077,
    HeroDefaultEquipCmd = 17942,
    GetItemListCmd = 29707,
    ItemChangePushCmd = 16437,
    UseItemCmd = -14948,
    UsePowerItemCmd = -32183,
    GetAllMailsCmd = 13187,
    ReadMailCmd = -6896,
    ReadMailBatchCmd = -13995,
    NewMailPushCmd = 21057,
    DeleteMailsPushCmd = 23229,
    DeleteMailBatchCmd = -2516,
    MarkMailJumpCmd = -22306,
    MaterialChangePushCmd = 22389,
    UpdateOpenPushCmd = -7688,
    GetPlayerInfoCmd = 14839,
    CreatePlayerCmd = 9183,
    PlayerInfoPushCmd = 9719,
    RenameCmd = -20970,
    SetSignatureCmd = 32124,
    SetBirthdayCmd = 30017,
    SetPortraitCmd = -2529,
    SetShowHeroUniqueIdsCmd = 27344,
    GetSimplePropertyCmd = -13331,
    SetSimplePropertyCmd = 25593,
    SimplePropertyPushCmd = 25325,
    GetClothInfoCmd = 23876,
    ClothUpdatePushCmd = -2085,
    ServerResultCodePushCmd = 9743,
    GetOtherPlayerInfoCmd = -19751,
    SetCharacterAgeCmd = 260,
    UseCdKeyRequsetCmd = -16517,
    MarkMainThumbnailCmd = -2446,
    GetRedDotInfosCmd = 26644,
    UpdateRedDotPushCmd = 28651,
    ShowRedDotCmd = -20810,
    GetRoomInfoCmd = 19031,
    UseBlockCmd = 24678,
    ResetRoomCmd = 26478,
    UseBuildingCmd = 20681,
    UnUseBuildingCmd = -25652,
    BuildingGainPushCmd = 22011,
    GetRoomObInfoCmd = 11304,
    RoomConfirmCmd = 30905,
    RoomRevertCmd = 27427,
    StartProductionLineCmd = -14005,
    GainProductionLineCmd = -29380,
    FormulaGainPushCmd = -2109,
    ProductionLineLvUpCmd = -8412,
    ProductionLineAccelerateCmd = 4262,
    GetOtherRoomObInfoCmd = -8438,
    RoomLevelUpCmd = 17896,
    ProductionLineInfoCmd = 6697,
    BlockPackageGainPushCmd = 868,
    GetBlockPackageInfoRequsetCmd = -24943,
    GetBuildingInfoCmd = -8792,
    UnUseBlockCmd = -11703,
    UpdateRoomHeroDataCmd = -19082,
    HideBuildingReddotRequsetCmd = -16648,
    HideBlockPackageReddotCmd = 19233,
    GainSpecialBlockPushCmd = 729,
    GainRoomHeroFaithCmd = -26364,
    GetCharacterInteractionBonusCmd = -13534,
    GetCharacterInteractionInfoCmd = -32217,
    StartCharacterInteractionCmd = 18441,
    GetSignInInfoCmd = -13395,
    SignInCmd = -29407,
    SignInAddupCmd = -20145,
    SignInHistoryCmd = -23661,
    GetHeroBirthdayCmd = 18942,
    ClientStatBaseInfoCmd = -28177,
    StatInfoPushCmd = -10251,
    UpdateClientStatBaseInfoCmd = -30158,
    GetStoreInfosCmd = -26134,
    BuyGoodsCmd = 26890,
    ReadStoreNewCmd = -9423,
    GetStoryCmd = -19309,
    UpdateStoryCmd = 9590,
    GetStoryFinishCmd = -8364,
    StoryFinishPushCmd = 16980,
    SummonCmd = 11695,
    GetSummonInfoCmd = -16421,
    SummonQueryTokenCmd = -7898,
    GetTaskInfoCmd = -3389,
    FinishTaskCmd = -16104,
    UpdateTaskPushCmd = -614,
    DeleteTaskPushCmd = -32406,
    GetTaskActivityBonusCmd = 9931,
    FinishAllTaskCmd = -5551,
    LogoutCmd = 21642,
    DebugLogoutCmd = -31567,
    GetWeekwalkInfoCmd = -31981,
    BeforeStartWeekwalkBattleCmd = 22468,
    WeekwalkGeneralCmd = 31013,
    WeekwalkInfoUpdatePushCmd = -28842,
    WeekwalkDialogCmd = -21961,
    WeekwalkHeroRecommendCmd = 10639,
    WeekwalkDialogHistoryCmd = 27625,
    ResetLayerCmd = 12972,
    MarkShowBuffCmd = 8091,
    MarkShowFinishedCmd = 21890,
    SelectNotCdHeroCmd = -17006,
    MarkPopDeepRuleCmd = 24540,
    MarkPopShallowSettleCmd = -18703,
    MarkPopDeepSettleCmd = 6293,
    GuestTimeOutPushCmd = 4958,
    MinorPlayTimeOutPushCmd = 31345,
    MinorLimitLoginTimePushCmd = 26459,
}
impl CmdId {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LoginCmd => "LoginCmd",
            Self::LostCmdRespCmd => "LostCmdRespCmd",
            Self::ForceLogoutCmd => "ForceLogoutCmd",
            Self::GetLostCmdRespResponseStartTagCmd => {
                "GetLostCmdRespResponseStartTagCmd"
            }
            Self::Act1000GetInfoCmd => "Act1000GetInfoCmd",
            Self::Act1000AccountBindBonusCmd => "Act1000AccountBindBonusCmd",
            Self::Get101InfosCmd => "Get101InfosCmd",
            Self::Get101BonusCmd => "Get101BonusCmd",
            Self::Get104InfosCmd => "Get104InfosCmd",
            Self::BeforeStartAct104BattleCmd => "BeforeStartAct104BattleCmd",
            Self::Act104BattleFinishPushCmd => "Act104BattleFinishPushCmd",
            Self::Activity104ItemChangePushCmd => "Activity104ItemChangePushCmd",
            Self::RefreshRetailCmd => "RefreshRetailCmd",
            Self::OptionalActivity104EquipCmd => "OptionalActivity104EquipCmd",
            Self::ComposeActivity104EquipCmd => "ComposeActivity104EquipCmd",
            Self::ChangeFightGroupCmd => "ChangeFightGroupCmd",
            Self::MarkActivity104StoryCmd => "MarkActivity104StoryCmd",
            Self::MarkEpisodeAfterStoryCmd => "MarkEpisodeAfterStoryCmd",
            Self::Get106InfosCmd => "Get106InfosCmd",
            Self::Get106OrderBonusCmd => "Get106OrderBonusCmd",
            Self::Update106OrderPushCmd => "Update106OrderPushCmd",
            Self::Get107GoodsInfoCmd => "Get107GoodsInfoCmd",
            Self::Buy107GoodsCmd => "Buy107GoodsCmd",
            Self::Get108InfosCmd => "Get108InfosCmd",
            Self::ResetMapCmd => "ResetMapCmd",
            Self::DialogEventSelectCmd => "DialogEventSelectCmd",
            Self::EnterFightEventCmd => "EnterFightEventCmd",
            Self::Get108BonusCmd => "Get108BonusCmd",
            Self::EpisodeUpdatePushCmd => "EpisodeUpdatePushCmd",
            Self::InfoUpdatePushCmd => "InfoUpdatePushCmd",
            Self::GetAct109InfoCmd => "GetAct109InfoCmd",
            Self::Act109StartEpisodeCmd => "Act109StartEpisodeCmd",
            Self::Act109BeginRoundCmd => "Act109BeginRoundCmd",
            Self::Act109StepPushCmd => "Act109StepPushCmd",
            Self::Act109UseItemCmd => "Act109UseItemCmd",
            Self::Act109EventEndCmd => "Act109EventEndCmd",
            Self::Act109AbortCmd => "Act109AbortCmd",
            Self::Act109MarkNewEpisodeRedDotCmd => "Act109MarkNewEpisodeRedDotCmd",
            Self::Get111InfosCmd => "Get111InfosCmd",
            Self::FinishEpisodeCmd => "FinishEpisodeCmd",
            Self::Act111InfoPushCmd => "Act111InfoPushCmd",
            Self::PushBoxTaskPushCmd => "PushBoxTaskPushCmd",
            Self::ReceiveTaskRewardCmd => "ReceiveTaskRewardCmd",
            Self::MarkRedDot1039Cmd => "MarkRedDot1039Cmd",
            Self::Get112InfosCmd => "Get112InfosCmd",
            Self::Exchange112Cmd => "Exchange112Cmd",
            Self::Act112TaskPushCmd => "Act112TaskPushCmd",
            Self::ReceiveAct112TaskRewardCmd => "ReceiveAct112TaskRewardCmd",
            Self::Get114InfosCmd => "Get114InfosCmd",
            Self::Act114InfoPushCmd => "Act114InfoPushCmd",
            Self::Act114TaskPushCmd => "Act114TaskPushCmd",
            Self::ReceiveAct114TaskRewardCmd => "ReceiveAct114TaskRewardCmd",
            Self::Act114EducateCmd => "Act114EducateCmd",
            Self::Act114TravelCmd => "Act114TravelCmd",
            Self::Act114MeetingCmd => "Act114MeetingCmd",
            Self::CheckEventCmd => "CheckEventCmd",
            Self::Act114RestCmd => "Act114RestCmd",
            Self::Act114KeyDayCmd => "Act114KeyDayCmd",
            Self::Act114TestCmd => "Act114TestCmd",
            Self::Act114ResetCmd => "Act114ResetCmd",
            Self::BeforeAct114BattleCmd => "BeforeAct114BattleCmd",
            Self::GetAct115InfoCmd => "GetAct115InfoCmd",
            Self::Act115StartEpisodeCmd => "Act115StartEpisodeCmd",
            Self::Act115BeginRoundCmd => "Act115BeginRoundCmd",
            Self::Act115StepPushCmd => "Act115StepPushCmd",
            Self::Act115EventEndCmd => "Act115EventEndCmd",
            Self::Act115AbortCmd => "Act115AbortCmd",
            Self::Act115BonusCmd => "Act115BonusCmd",
            Self::Act115UseSkillCmd => "Act115UseSkillCmd",
            Self::Act115RevertCmd => "Act115RevertCmd",
            Self::Get116InfosCmd => "Get116InfosCmd",
            Self::UpgradeElementCmd => "UpgradeElementCmd",
            Self::BuildTrapCmd => "BuildTrapCmd",
            Self::PutTrapCmd => "PutTrapCmd",
            Self::Act117InfoCmd => "Act117InfoCmd",
            Self::Act117NegotiateCmd => "Act117NegotiateCmd",
            Self::Act117DealCmd => "Act117DealCmd",
            Self::Act117GetBonusCmd => "Act117GetBonusCmd",
            Self::GetAct120InfoCmd => "GetAct120InfoCmd",
            Self::Act120StartEpisodeCmd => "Act120StartEpisodeCmd",
            Self::Act120BeginRoundCmd => "Act120BeginRoundCmd",
            Self::Act120StepPushCmd => "Act120StepPushCmd",
            Self::Act120UseItemCmd => "Act120UseItemCmd",
            Self::Act120EventEndCmd => "Act120EventEndCmd",
            Self::Act120AbortCmd => "Act120AbortCmd",
            Self::GetActivityInfosCmd => "GetActivityInfosCmd",
            Self::UpdateActivityPushCmd => "UpdateActivityPushCmd",
            Self::EndActivityPushCmd => "EndActivityPushCmd",
            Self::ActivityNewStageReadCmd => "ActivityNewStageReadCmd",
            Self::GetBannerInfoCmd => "GetBannerInfoCmd",
            Self::SetBannerNotShowCmd => "SetBannerNotShowCmd",
            Self::GetBpInfoCmd => "GetBpInfoCmd",
            Self::GetBpBonusCmd => "GetBpBonusCmd",
            Self::BpScoreUpdatePushCmd => "BpScoreUpdatePushCmd",
            Self::BpPayPushCmd => "BpPayPushCmd",
            Self::BpBuyLevelRequsetCmd => "BpBuyLevelRequsetCmd",
            Self::BpMarkFirstShowCmd => "BpMarkFirstShowCmd",
            Self::GetChargeInfoCmd => "GetChargeInfoCmd",
            Self::NewOrderCmd => "NewOrderCmd",
            Self::OrderCompletePushCmd => "OrderCompletePushCmd",
            Self::GetMonthCardInfoCmd => "GetMonthCardInfoCmd",
            Self::GetMonthCardBonusCmd => "GetMonthCardBonusCmd",
            Self::SandboxChargeRequsetCmd => "SandboxChargeRequsetCmd",
            Self::ReadChargeNewCmd => "ReadChargeNewCmd",
            Self::SendMsgCmd => "SendMsgCmd",
            Self::DeleteOfflineMsgCmd => "DeleteOfflineMsgCmd",
            Self::ChatMsgPushCmd => "ChatMsgPushCmd",
            Self::GetReportTypeCmd => "GetReportTypeCmd",
            Self::ReportCmd => "ReportCmd",
            Self::GetServerTimeCmd => "GetServerTimeCmd",
            Self::GetCurrencyListCmd => "GetCurrencyListCmd",
            Self::CurrencyChangePushCmd => "CurrencyChangePushCmd",
            Self::GetBuyPowerInfoCmd => "GetBuyPowerInfoCmd",
            Self::BuyPowerCmd => "BuyPowerCmd",
            Self::ExchangeDiamondCmd => "ExchangeDiamondCmd",
            Self::GetDungeonCmd => "GetDungeonCmd",
            Self::DungeonUpdatePushCmd => "DungeonUpdatePushCmd",
            Self::StartDungeonCmd => "StartDungeonCmd",
            Self::EndDungeonCmd => "EndDungeonCmd",
            Self::EndDungeonPushCmd => "EndDungeonPushCmd",
            Self::MapElementCmd => "MapElementCmd",
            Self::ChapterMapUpdatePushCmd => "ChapterMapUpdatePushCmd",
            Self::ChapterMapElementUpdatePushCmd => "ChapterMapElementUpdatePushCmd",
            Self::GetPointRewardCmd => "GetPointRewardCmd",
            Self::GetEpisodeHeroRecommendCmd => "GetEpisodeHeroRecommendCmd",
            Self::EquipSpDungeonUpdatePushCmd => "EquipSpDungeonUpdatePushCmd",
            Self::RewardPointUpdatePushCmd => "RewardPointUpdatePushCmd",
            Self::InstructionDungeonRewardCmd => "InstructionDungeonRewardCmd",
            Self::InstructionDungeonFinalRewardCmd => "InstructionDungeonFinalRewardCmd",
            Self::InstructionDungeonInfoCmd => "InstructionDungeonInfoCmd",
            Self::InstructionDungeonInfoPushCmd => "InstructionDungeonInfoPushCmd",
            Self::InstructionDungeonOpenCmd => "InstructionDungeonOpenCmd",
            Self::CoverDungeonRecordCmd => "CoverDungeonRecordCmd",
            Self::PuzzleFinishCmd => "PuzzleFinishCmd",
            Self::GetEquipInfoCmd => "GetEquipInfoCmd",
            Self::EquipUpdatePushCmd => "EquipUpdatePushCmd",
            Self::EquipDeletePushCmd => "EquipDeletePushCmd",
            Self::EquipStrengthenCmd => "EquipStrengthenCmd",
            Self::EquipBreakCmd => "EquipBreakCmd",
            Self::EquipLockCmd => "EquipLockCmd",
            Self::EquipComposeCmd => "EquipComposeCmd",
            Self::EquipDecomposeCmd => "EquipDecomposeCmd",
            Self::EquipRefineCmd => "EquipRefineCmd",
            Self::GetExploreInfoCmd => "GetExploreInfoCmd",
            Self::GetExploreSimpleInfoCmd => "GetExploreSimpleInfoCmd",
            Self::EnterChapterCmd => "EnterChapterCmd",
            Self::ChangeMapCmd => "ChangeMapCmd",
            Self::StartExplorePushCmd => "StartExplorePushCmd",
            Self::ExploreMoveCmd => "ExploreMoveCmd",
            Self::ExploreSetAreaVisibleCmd => "ExploreSetAreaVisibleCmd",
            Self::ExploreInteractSetStatusCmd => "ExploreInteractSetStatusCmd",
            Self::ExploreInteractSetStatus2Cmd => "ExploreInteractSetStatus2Cmd",
            Self::ExploreInteractSetStepCmd => "ExploreInteractSetStepCmd",
            Self::ExploreUseItemCmd => "ExploreUseItemCmd",
            Self::ExploreItemChangePushCmd => "ExploreItemChangePushCmd",
            Self::ExploreInteractCmd => "ExploreInteractCmd",
            Self::ExploreItemInteractCmd => "ExploreItemInteractCmd",
            Self::BeginFightCmd => "BeginFightCmd",
            Self::TestFightCmd => "TestFightCmd",
            Self::TestFightIdCmd => "TestFightIdCmd",
            Self::MoveCardCmd => "MoveCardCmd",
            Self::ResetRoundCmd => "ResetRoundCmd",
            Self::BeginRoundCmd => "BeginRoundCmd",
            Self::EndRoundCmd => "EndRoundCmd",
            Self::ChangeSubHeroCmd => "ChangeSubHeroCmd",
            Self::ReconnectFightCmd => "ReconnectFightCmd",
            Self::CardInfoPushCmd => "CardInfoPushCmd",
            Self::TeamInfoPushCmd => "TeamInfoPushCmd",
            Self::EndFightCmd => "EndFightCmd",
            Self::EndFightPushCmd => "EndFightPushCmd",
            Self::FightWavePushCmd => "FightWavePushCmd",
            Self::UseClothSkillCmd => "UseClothSkillCmd",
            Self::RedealCardInfoPushCmd => "RedealCardInfoPushCmd",
            Self::AutoRoundCmd => "AutoRoundCmd",
            Self::GetFightOperCmd => "GetFightOperCmd",
            Self::GetFightRecordGroupCmd => "GetFightRecordGroupCmd",
            Self::GetApplyListCmd => "GetApplyListCmd",
            Self::ApplyCmd => "ApplyCmd",
            Self::HandleApplyCmd => "HandleApplyCmd",
            Self::RejectAllCmd => "RejectAllCmd",
            Self::GetFriendInfoListCmd => "GetFriendInfoListCmd",
            Self::AddBlacklistCmd => "AddBlacklistCmd",
            Self::RemoveBlacklistCmd => "RemoveBlacklistCmd",
            Self::RemoveFriendCmd => "RemoveFriendCmd",
            Self::SearchCmd => "SearchCmd",
            Self::GetBlacklistCmd => "GetBlacklistCmd",
            Self::BlacklistChangePushCmd => "BlacklistChangePushCmd",
            Self::AgreeAllCmd => "AgreeAllCmd",
            Self::LoadFriendInfosCmd => "LoadFriendInfosCmd",
            Self::FriendChangePushCmd => "FriendChangePushCmd",
            Self::GmCmd => "GMCmd",
            Self::GpuCpuLogCmd => "GpuCpuLogCmd",
            Self::FinishGuideCmd => "FinishGuideCmd",
            Self::UpdateGuidePushCmd => "UpdateGuidePushCmd",
            Self::GetGuideInfoCmd => "GetGuideInfoCmd",
            Self::GetHandbookInfoCmd => "GetHandbookInfoCmd",
            Self::HandbookReadCmd => "HandbookReadCmd",
            Self::GetHeroGroupListCmd => "GetHeroGroupListCmd",
            Self::UpdateHeroGroupCmd => "UpdateHeroGroupCmd",
            Self::SetHeroGroupEquipCmd => "SetHeroGroupEquipCmd",
            Self::SetHeroGroupSnapshotCmd => "SetHeroGroupSnapshotCmd",
            Self::UpdateHeroGroupPushCmd => "UpdateHeroGroupPushCmd",
            Self::HeroInfoListCmd => "HeroInfoListCmd",
            Self::HeroUpdatePushCmd => "HeroUpdatePushCmd",
            Self::HeroUpgradeSkillCmd => "HeroUpgradeSkillCmd",
            Self::HeroLevelUpCmd => "HeroLevelUpCmd",
            Self::HeroRankUpCmd => "HeroRankUpCmd",
            Self::UseSkinCmd => "UseSkinCmd",
            Self::HeroSkinGainPushCmd => "HeroSkinGainPushCmd",
            Self::UnMarkIsNewCmd => "UnMarkIsNewCmd",
            Self::UnlockVoiceCmd => "UnlockVoiceCmd",
            Self::ItemUnlockCmd => "ItemUnlockCmd",
            Self::HeroGainPushCmd => "HeroGainPushCmd",
            Self::HeroTouchCmd => "HeroTouchCmd",
            Self::HeroTalentUpCmd => "HeroTalentUpCmd",
            Self::PutTalentCubeCmd => "PutTalentCubeCmd",
            Self::TakeoffAllTalentCubeCmd => "TakeoffAllTalentCubeCmd",
            Self::PutTalentSchemeCmd => "PutTalentSchemeCmd",
            Self::HeroDefaultEquipCmd => "HeroDefaultEquipCmd",
            Self::GetItemListCmd => "GetItemListCmd",
            Self::ItemChangePushCmd => "ItemChangePushCmd",
            Self::UseItemCmd => "UseItemCmd",
            Self::UsePowerItemCmd => "UsePowerItemCmd",
            Self::GetAllMailsCmd => "GetAllMailsCmd",
            Self::ReadMailCmd => "ReadMailCmd",
            Self::ReadMailBatchCmd => "ReadMailBatchCmd",
            Self::NewMailPushCmd => "NewMailPushCmd",
            Self::DeleteMailsPushCmd => "DeleteMailsPushCmd",
            Self::DeleteMailBatchCmd => "DeleteMailBatchCmd",
            Self::MarkMailJumpCmd => "MarkMailJumpCmd",
            Self::MaterialChangePushCmd => "MaterialChangePushCmd",
            Self::UpdateOpenPushCmd => "UpdateOpenPushCmd",
            Self::GetPlayerInfoCmd => "GetPlayerInfoCmd",
            Self::CreatePlayerCmd => "CreatePlayerCmd",
            Self::PlayerInfoPushCmd => "PlayerInfoPushCmd",
            Self::RenameCmd => "RenameCmd",
            Self::SetSignatureCmd => "SetSignatureCmd",
            Self::SetBirthdayCmd => "SetBirthdayCmd",
            Self::SetPortraitCmd => "SetPortraitCmd",
            Self::SetShowHeroUniqueIdsCmd => "SetShowHeroUniqueIdsCmd",
            Self::GetSimplePropertyCmd => "GetSimplePropertyCmd",
            Self::SetSimplePropertyCmd => "SetSimplePropertyCmd",
            Self::SimplePropertyPushCmd => "SimplePropertyPushCmd",
            Self::GetClothInfoCmd => "GetClothInfoCmd",
            Self::ClothUpdatePushCmd => "ClothUpdatePushCmd",
            Self::ServerResultCodePushCmd => "ServerResultCodePushCmd",
            Self::GetOtherPlayerInfoCmd => "GetOtherPlayerInfoCmd",
            Self::SetCharacterAgeCmd => "SetCharacterAgeCmd",
            Self::UseCdKeyRequsetCmd => "UseCdKeyRequsetCmd",
            Self::MarkMainThumbnailCmd => "MarkMainThumbnailCmd",
            Self::GetRedDotInfosCmd => "GetRedDotInfosCmd",
            Self::UpdateRedDotPushCmd => "UpdateRedDotPushCmd",
            Self::ShowRedDotCmd => "ShowRedDotCmd",
            Self::GetRoomInfoCmd => "GetRoomInfoCmd",
            Self::UseBlockCmd => "UseBlockCmd",
            Self::ResetRoomCmd => "ResetRoomCmd",
            Self::UseBuildingCmd => "UseBuildingCmd",
            Self::UnUseBuildingCmd => "UnUseBuildingCmd",
            Self::BuildingGainPushCmd => "BuildingGainPushCmd",
            Self::GetRoomObInfoCmd => "GetRoomObInfoCmd",
            Self::RoomConfirmCmd => "RoomConfirmCmd",
            Self::RoomRevertCmd => "RoomRevertCmd",
            Self::StartProductionLineCmd => "StartProductionLineCmd",
            Self::GainProductionLineCmd => "GainProductionLineCmd",
            Self::FormulaGainPushCmd => "FormulaGainPushCmd",
            Self::ProductionLineLvUpCmd => "ProductionLineLvUpCmd",
            Self::ProductionLineAccelerateCmd => "ProductionLineAccelerateCmd",
            Self::GetOtherRoomObInfoCmd => "GetOtherRoomObInfoCmd",
            Self::RoomLevelUpCmd => "RoomLevelUpCmd",
            Self::ProductionLineInfoCmd => "ProductionLineInfoCmd",
            Self::BlockPackageGainPushCmd => "BlockPackageGainPushCmd",
            Self::GetBlockPackageInfoRequsetCmd => "GetBlockPackageInfoRequsetCmd",
            Self::GetBuildingInfoCmd => "GetBuildingInfoCmd",
            Self::UnUseBlockCmd => "UnUseBlockCmd",
            Self::UpdateRoomHeroDataCmd => "UpdateRoomHeroDataCmd",
            Self::HideBuildingReddotRequsetCmd => "HideBuildingReddotRequsetCmd",
            Self::HideBlockPackageReddotCmd => "HideBlockPackageReddotCmd",
            Self::GainSpecialBlockPushCmd => "GainSpecialBlockPushCmd",
            Self::GainRoomHeroFaithCmd => "GainRoomHeroFaithCmd",
            Self::GetCharacterInteractionBonusCmd => "GetCharacterInteractionBonusCmd",
            Self::GetCharacterInteractionInfoCmd => "GetCharacterInteractionInfoCmd",
            Self::StartCharacterInteractionCmd => "StartCharacterInteractionCmd",
            Self::GetSignInInfoCmd => "GetSignInInfoCmd",
            Self::SignInCmd => "SignInCmd",
            Self::SignInAddupCmd => "SignInAddupCmd",
            Self::SignInHistoryCmd => "SignInHistoryCmd",
            Self::GetHeroBirthdayCmd => "GetHeroBirthdayCmd",
            Self::ClientStatBaseInfoCmd => "ClientStatBaseInfoCmd",
            Self::StatInfoPushCmd => "StatInfoPushCmd",
            Self::UpdateClientStatBaseInfoCmd => "UpdateClientStatBaseInfoCmd",
            Self::GetStoreInfosCmd => "GetStoreInfosCmd",
            Self::BuyGoodsCmd => "BuyGoodsCmd",
            Self::ReadStoreNewCmd => "ReadStoreNewCmd",
            Self::GetStoryCmd => "GetStoryCmd",
            Self::UpdateStoryCmd => "UpdateStoryCmd",
            Self::GetStoryFinishCmd => "GetStoryFinishCmd",
            Self::StoryFinishPushCmd => "StoryFinishPushCmd",
            Self::SummonCmd => "SummonCmd",
            Self::GetSummonInfoCmd => "GetSummonInfoCmd",
            Self::SummonQueryTokenCmd => "SummonQueryTokenCmd",
            Self::GetTaskInfoCmd => "GetTaskInfoCmd",
            Self::FinishTaskCmd => "FinishTaskCmd",
            Self::UpdateTaskPushCmd => "UpdateTaskPushCmd",
            Self::DeleteTaskPushCmd => "DeleteTaskPushCmd",
            Self::GetTaskActivityBonusCmd => "GetTaskActivityBonusCmd",
            Self::FinishAllTaskCmd => "FinishAllTaskCmd",
            Self::LogoutCmd => "LogoutCmd",
            Self::DebugLogoutCmd => "DebugLogoutCmd",
            Self::GetWeekwalkInfoCmd => "GetWeekwalkInfoCmd",
            Self::BeforeStartWeekwalkBattleCmd => "BeforeStartWeekwalkBattleCmd",
            Self::WeekwalkGeneralCmd => "WeekwalkGeneralCmd",
            Self::WeekwalkInfoUpdatePushCmd => "WeekwalkInfoUpdatePushCmd",
            Self::WeekwalkDialogCmd => "WeekwalkDialogCmd",
            Self::WeekwalkHeroRecommendCmd => "WeekwalkHeroRecommendCmd",
            Self::WeekwalkDialogHistoryCmd => "WeekwalkDialogHistoryCmd",
            Self::ResetLayerCmd => "ResetLayerCmd",
            Self::MarkShowBuffCmd => "MarkShowBuffCmd",
            Self::MarkShowFinishedCmd => "MarkShowFinishedCmd",
            Self::SelectNotCdHeroCmd => "SelectNotCdHeroCmd",
            Self::MarkPopDeepRuleCmd => "MarkPopDeepRuleCmd",
            Self::MarkPopShallowSettleCmd => "MarkPopShallowSettleCmd",
            Self::MarkPopDeepSettleCmd => "MarkPopDeepSettleCmd",
            Self::GuestTimeOutPushCmd => "GuestTimeOutPushCmd",
            Self::MinorPlayTimeOutPushCmd => "MinorPlayTimeOutPushCmd",
            Self::MinorLimitLoginTimePushCmd => "MinorLimitLoginTimePushCmd",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LoginCmd" => Some(Self::LoginCmd),
            "LostCmdRespCmd" => Some(Self::LostCmdRespCmd),
            "ForceLogoutCmd" => Some(Self::ForceLogoutCmd),
            "GetLostCmdRespResponseStartTagCmd" => {
                Some(Self::GetLostCmdRespResponseStartTagCmd)
            }
            "Act1000GetInfoCmd" => Some(Self::Act1000GetInfoCmd),
            "Act1000AccountBindBonusCmd" => Some(Self::Act1000AccountBindBonusCmd),
            "Get101InfosCmd" => Some(Self::Get101InfosCmd),
            "Get101BonusCmd" => Some(Self::Get101BonusCmd),
            "Get104InfosCmd" => Some(Self::Get104InfosCmd),
            "BeforeStartAct104BattleCmd" => Some(Self::BeforeStartAct104BattleCmd),
            "Act104BattleFinishPushCmd" => Some(Self::Act104BattleFinishPushCmd),
            "Activity104ItemChangePushCmd" => Some(Self::Activity104ItemChangePushCmd),
            "RefreshRetailCmd" => Some(Self::RefreshRetailCmd),
            "OptionalActivity104EquipCmd" => Some(Self::OptionalActivity104EquipCmd),
            "ComposeActivity104EquipCmd" => Some(Self::ComposeActivity104EquipCmd),
            "ChangeFightGroupCmd" => Some(Self::ChangeFightGroupCmd),
            "MarkActivity104StoryCmd" => Some(Self::MarkActivity104StoryCmd),
            "MarkEpisodeAfterStoryCmd" => Some(Self::MarkEpisodeAfterStoryCmd),
            "Get106InfosCmd" => Some(Self::Get106InfosCmd),
            "Get106OrderBonusCmd" => Some(Self::Get106OrderBonusCmd),
            "Update106OrderPushCmd" => Some(Self::Update106OrderPushCmd),
            "Get107GoodsInfoCmd" => Some(Self::Get107GoodsInfoCmd),
            "Buy107GoodsCmd" => Some(Self::Buy107GoodsCmd),
            "Get108InfosCmd" => Some(Self::Get108InfosCmd),
            "ResetMapCmd" => Some(Self::ResetMapCmd),
            "DialogEventSelectCmd" => Some(Self::DialogEventSelectCmd),
            "EnterFightEventCmd" => Some(Self::EnterFightEventCmd),
            "Get108BonusCmd" => Some(Self::Get108BonusCmd),
            "EpisodeUpdatePushCmd" => Some(Self::EpisodeUpdatePushCmd),
            "InfoUpdatePushCmd" => Some(Self::InfoUpdatePushCmd),
            "GetAct109InfoCmd" => Some(Self::GetAct109InfoCmd),
            "Act109StartEpisodeCmd" => Some(Self::Act109StartEpisodeCmd),
            "Act109BeginRoundCmd" => Some(Self::Act109BeginRoundCmd),
            "Act109StepPushCmd" => Some(Self::Act109StepPushCmd),
            "Act109UseItemCmd" => Some(Self::Act109UseItemCmd),
            "Act109EventEndCmd" => Some(Self::Act109EventEndCmd),
            "Act109AbortCmd" => Some(Self::Act109AbortCmd),
            "Act109MarkNewEpisodeRedDotCmd" => Some(Self::Act109MarkNewEpisodeRedDotCmd),
            "Get111InfosCmd" => Some(Self::Get111InfosCmd),
            "FinishEpisodeCmd" => Some(Self::FinishEpisodeCmd),
            "Act111InfoPushCmd" => Some(Self::Act111InfoPushCmd),
            "PushBoxTaskPushCmd" => Some(Self::PushBoxTaskPushCmd),
            "ReceiveTaskRewardCmd" => Some(Self::ReceiveTaskRewardCmd),
            "MarkRedDot1039Cmd" => Some(Self::MarkRedDot1039Cmd),
            "Get112InfosCmd" => Some(Self::Get112InfosCmd),
            "Exchange112Cmd" => Some(Self::Exchange112Cmd),
            "Act112TaskPushCmd" => Some(Self::Act112TaskPushCmd),
            "ReceiveAct112TaskRewardCmd" => Some(Self::ReceiveAct112TaskRewardCmd),
            "Get114InfosCmd" => Some(Self::Get114InfosCmd),
            "Act114InfoPushCmd" => Some(Self::Act114InfoPushCmd),
            "Act114TaskPushCmd" => Some(Self::Act114TaskPushCmd),
            "ReceiveAct114TaskRewardCmd" => Some(Self::ReceiveAct114TaskRewardCmd),
            "Act114EducateCmd" => Some(Self::Act114EducateCmd),
            "Act114TravelCmd" => Some(Self::Act114TravelCmd),
            "Act114MeetingCmd" => Some(Self::Act114MeetingCmd),
            "CheckEventCmd" => Some(Self::CheckEventCmd),
            "Act114RestCmd" => Some(Self::Act114RestCmd),
            "Act114KeyDayCmd" => Some(Self::Act114KeyDayCmd),
            "Act114TestCmd" => Some(Self::Act114TestCmd),
            "Act114ResetCmd" => Some(Self::Act114ResetCmd),
            "BeforeAct114BattleCmd" => Some(Self::BeforeAct114BattleCmd),
            "GetAct115InfoCmd" => Some(Self::GetAct115InfoCmd),
            "Act115StartEpisodeCmd" => Some(Self::Act115StartEpisodeCmd),
            "Act115BeginRoundCmd" => Some(Self::Act115BeginRoundCmd),
            "Act115StepPushCmd" => Some(Self::Act115StepPushCmd),
            "Act115EventEndCmd" => Some(Self::Act115EventEndCmd),
            "Act115AbortCmd" => Some(Self::Act115AbortCmd),
            "Act115BonusCmd" => Some(Self::Act115BonusCmd),
            "Act115UseSkillCmd" => Some(Self::Act115UseSkillCmd),
            "Act115RevertCmd" => Some(Self::Act115RevertCmd),
            "Get116InfosCmd" => Some(Self::Get116InfosCmd),
            "UpgradeElementCmd" => Some(Self::UpgradeElementCmd),
            "BuildTrapCmd" => Some(Self::BuildTrapCmd),
            "PutTrapCmd" => Some(Self::PutTrapCmd),
            "Act117InfoCmd" => Some(Self::Act117InfoCmd),
            "Act117NegotiateCmd" => Some(Self::Act117NegotiateCmd),
            "Act117DealCmd" => Some(Self::Act117DealCmd),
            "Act117GetBonusCmd" => Some(Self::Act117GetBonusCmd),
            "GetAct120InfoCmd" => Some(Self::GetAct120InfoCmd),
            "Act120StartEpisodeCmd" => Some(Self::Act120StartEpisodeCmd),
            "Act120BeginRoundCmd" => Some(Self::Act120BeginRoundCmd),
            "Act120StepPushCmd" => Some(Self::Act120StepPushCmd),
            "Act120UseItemCmd" => Some(Self::Act120UseItemCmd),
            "Act120EventEndCmd" => Some(Self::Act120EventEndCmd),
            "Act120AbortCmd" => Some(Self::Act120AbortCmd),
            "GetActivityInfosCmd" => Some(Self::GetActivityInfosCmd),
            "UpdateActivityPushCmd" => Some(Self::UpdateActivityPushCmd),
            "EndActivityPushCmd" => Some(Self::EndActivityPushCmd),
            "ActivityNewStageReadCmd" => Some(Self::ActivityNewStageReadCmd),
            "GetBannerInfoCmd" => Some(Self::GetBannerInfoCmd),
            "SetBannerNotShowCmd" => Some(Self::SetBannerNotShowCmd),
            "GetBpInfoCmd" => Some(Self::GetBpInfoCmd),
            "GetBpBonusCmd" => Some(Self::GetBpBonusCmd),
            "BpScoreUpdatePushCmd" => Some(Self::BpScoreUpdatePushCmd),
            "BpPayPushCmd" => Some(Self::BpPayPushCmd),
            "BpBuyLevelRequsetCmd" => Some(Self::BpBuyLevelRequsetCmd),
            "BpMarkFirstShowCmd" => Some(Self::BpMarkFirstShowCmd),
            "GetChargeInfoCmd" => Some(Self::GetChargeInfoCmd),
            "NewOrderCmd" => Some(Self::NewOrderCmd),
            "OrderCompletePushCmd" => Some(Self::OrderCompletePushCmd),
            "GetMonthCardInfoCmd" => Some(Self::GetMonthCardInfoCmd),
            "GetMonthCardBonusCmd" => Some(Self::GetMonthCardBonusCmd),
            "SandboxChargeRequsetCmd" => Some(Self::SandboxChargeRequsetCmd),
            "ReadChargeNewCmd" => Some(Self::ReadChargeNewCmd),
            "SendMsgCmd" => Some(Self::SendMsgCmd),
            "DeleteOfflineMsgCmd" => Some(Self::DeleteOfflineMsgCmd),
            "ChatMsgPushCmd" => Some(Self::ChatMsgPushCmd),
            "GetReportTypeCmd" => Some(Self::GetReportTypeCmd),
            "ReportCmd" => Some(Self::ReportCmd),
            "GetServerTimeCmd" => Some(Self::GetServerTimeCmd),
            "GetCurrencyListCmd" => Some(Self::GetCurrencyListCmd),
            "CurrencyChangePushCmd" => Some(Self::CurrencyChangePushCmd),
            "GetBuyPowerInfoCmd" => Some(Self::GetBuyPowerInfoCmd),
            "BuyPowerCmd" => Some(Self::BuyPowerCmd),
            "ExchangeDiamondCmd" => Some(Self::ExchangeDiamondCmd),
            "GetDungeonCmd" => Some(Self::GetDungeonCmd),
            "DungeonUpdatePushCmd" => Some(Self::DungeonUpdatePushCmd),
            "StartDungeonCmd" => Some(Self::StartDungeonCmd),
            "EndDungeonCmd" => Some(Self::EndDungeonCmd),
            "EndDungeonPushCmd" => Some(Self::EndDungeonPushCmd),
            "MapElementCmd" => Some(Self::MapElementCmd),
            "ChapterMapUpdatePushCmd" => Some(Self::ChapterMapUpdatePushCmd),
            "ChapterMapElementUpdatePushCmd" => {
                Some(Self::ChapterMapElementUpdatePushCmd)
            }
            "GetPointRewardCmd" => Some(Self::GetPointRewardCmd),
            "GetEpisodeHeroRecommendCmd" => Some(Self::GetEpisodeHeroRecommendCmd),
            "EquipSpDungeonUpdatePushCmd" => Some(Self::EquipSpDungeonUpdatePushCmd),
            "RewardPointUpdatePushCmd" => Some(Self::RewardPointUpdatePushCmd),
            "InstructionDungeonRewardCmd" => Some(Self::InstructionDungeonRewardCmd),
            "InstructionDungeonFinalRewardCmd" => {
                Some(Self::InstructionDungeonFinalRewardCmd)
            }
            "InstructionDungeonInfoCmd" => Some(Self::InstructionDungeonInfoCmd),
            "InstructionDungeonInfoPushCmd" => Some(Self::InstructionDungeonInfoPushCmd),
            "InstructionDungeonOpenCmd" => Some(Self::InstructionDungeonOpenCmd),
            "CoverDungeonRecordCmd" => Some(Self::CoverDungeonRecordCmd),
            "PuzzleFinishCmd" => Some(Self::PuzzleFinishCmd),
            "GetEquipInfoCmd" => Some(Self::GetEquipInfoCmd),
            "EquipUpdatePushCmd" => Some(Self::EquipUpdatePushCmd),
            "EquipDeletePushCmd" => Some(Self::EquipDeletePushCmd),
            "EquipStrengthenCmd" => Some(Self::EquipStrengthenCmd),
            "EquipBreakCmd" => Some(Self::EquipBreakCmd),
            "EquipLockCmd" => Some(Self::EquipLockCmd),
            "EquipComposeCmd" => Some(Self::EquipComposeCmd),
            "EquipDecomposeCmd" => Some(Self::EquipDecomposeCmd),
            "EquipRefineCmd" => Some(Self::EquipRefineCmd),
            "GetExploreInfoCmd" => Some(Self::GetExploreInfoCmd),
            "GetExploreSimpleInfoCmd" => Some(Self::GetExploreSimpleInfoCmd),
            "EnterChapterCmd" => Some(Self::EnterChapterCmd),
            "ChangeMapCmd" => Some(Self::ChangeMapCmd),
            "StartExplorePushCmd" => Some(Self::StartExplorePushCmd),
            "ExploreMoveCmd" => Some(Self::ExploreMoveCmd),
            "ExploreSetAreaVisibleCmd" => Some(Self::ExploreSetAreaVisibleCmd),
            "ExploreInteractSetStatusCmd" => Some(Self::ExploreInteractSetStatusCmd),
            "ExploreInteractSetStatus2Cmd" => Some(Self::ExploreInteractSetStatus2Cmd),
            "ExploreInteractSetStepCmd" => Some(Self::ExploreInteractSetStepCmd),
            "ExploreUseItemCmd" => Some(Self::ExploreUseItemCmd),
            "ExploreItemChangePushCmd" => Some(Self::ExploreItemChangePushCmd),
            "ExploreInteractCmd" => Some(Self::ExploreInteractCmd),
            "ExploreItemInteractCmd" => Some(Self::ExploreItemInteractCmd),
            "BeginFightCmd" => Some(Self::BeginFightCmd),
            "TestFightCmd" => Some(Self::TestFightCmd),
            "TestFightIdCmd" => Some(Self::TestFightIdCmd),
            "MoveCardCmd" => Some(Self::MoveCardCmd),
            "ResetRoundCmd" => Some(Self::ResetRoundCmd),
            "BeginRoundCmd" => Some(Self::BeginRoundCmd),
            "EndRoundCmd" => Some(Self::EndRoundCmd),
            "ChangeSubHeroCmd" => Some(Self::ChangeSubHeroCmd),
            "ReconnectFightCmd" => Some(Self::ReconnectFightCmd),
            "CardInfoPushCmd" => Some(Self::CardInfoPushCmd),
            "TeamInfoPushCmd" => Some(Self::TeamInfoPushCmd),
            "EndFightCmd" => Some(Self::EndFightCmd),
            "EndFightPushCmd" => Some(Self::EndFightPushCmd),
            "FightWavePushCmd" => Some(Self::FightWavePushCmd),
            "UseClothSkillCmd" => Some(Self::UseClothSkillCmd),
            "RedealCardInfoPushCmd" => Some(Self::RedealCardInfoPushCmd),
            "AutoRoundCmd" => Some(Self::AutoRoundCmd),
            "GetFightOperCmd" => Some(Self::GetFightOperCmd),
            "GetFightRecordGroupCmd" => Some(Self::GetFightRecordGroupCmd),
            "GetApplyListCmd" => Some(Self::GetApplyListCmd),
            "ApplyCmd" => Some(Self::ApplyCmd),
            "HandleApplyCmd" => Some(Self::HandleApplyCmd),
            "RejectAllCmd" => Some(Self::RejectAllCmd),
            "GetFriendInfoListCmd" => Some(Self::GetFriendInfoListCmd),
            "AddBlacklistCmd" => Some(Self::AddBlacklistCmd),
            "RemoveBlacklistCmd" => Some(Self::RemoveBlacklistCmd),
            "RemoveFriendCmd" => Some(Self::RemoveFriendCmd),
            "SearchCmd" => Some(Self::SearchCmd),
            "GetBlacklistCmd" => Some(Self::GetBlacklistCmd),
            "BlacklistChangePushCmd" => Some(Self::BlacklistChangePushCmd),
            "AgreeAllCmd" => Some(Self::AgreeAllCmd),
            "LoadFriendInfosCmd" => Some(Self::LoadFriendInfosCmd),
            "FriendChangePushCmd" => Some(Self::FriendChangePushCmd),
            "GMCmd" => Some(Self::GmCmd),
            "GpuCpuLogCmd" => Some(Self::GpuCpuLogCmd),
            "FinishGuideCmd" => Some(Self::FinishGuideCmd),
            "UpdateGuidePushCmd" => Some(Self::UpdateGuidePushCmd),
            "GetGuideInfoCmd" => Some(Self::GetGuideInfoCmd),
            "GetHandbookInfoCmd" => Some(Self::GetHandbookInfoCmd),
            "HandbookReadCmd" => Some(Self::HandbookReadCmd),
            "GetHeroGroupListCmd" => Some(Self::GetHeroGroupListCmd),
            "UpdateHeroGroupCmd" => Some(Self::UpdateHeroGroupCmd),
            "SetHeroGroupEquipCmd" => Some(Self::SetHeroGroupEquipCmd),
            "SetHeroGroupSnapshotCmd" => Some(Self::SetHeroGroupSnapshotCmd),
            "UpdateHeroGroupPushCmd" => Some(Self::UpdateHeroGroupPushCmd),
            "HeroInfoListCmd" => Some(Self::HeroInfoListCmd),
            "HeroUpdatePushCmd" => Some(Self::HeroUpdatePushCmd),
            "HeroUpgradeSkillCmd" => Some(Self::HeroUpgradeSkillCmd),
            "HeroLevelUpCmd" => Some(Self::HeroLevelUpCmd),
            "HeroRankUpCmd" => Some(Self::HeroRankUpCmd),
            "UseSkinCmd" => Some(Self::UseSkinCmd),
            "HeroSkinGainPushCmd" => Some(Self::HeroSkinGainPushCmd),
            "UnMarkIsNewCmd" => Some(Self::UnMarkIsNewCmd),
            "UnlockVoiceCmd" => Some(Self::UnlockVoiceCmd),
            "ItemUnlockCmd" => Some(Self::ItemUnlockCmd),
            "HeroGainPushCmd" => Some(Self::HeroGainPushCmd),
            "HeroTouchCmd" => Some(Self::HeroTouchCmd),
            "HeroTalentUpCmd" => Some(Self::HeroTalentUpCmd),
            "PutTalentCubeCmd" => Some(Self::PutTalentCubeCmd),
            "TakeoffAllTalentCubeCmd" => Some(Self::TakeoffAllTalentCubeCmd),
            "PutTalentSchemeCmd" => Some(Self::PutTalentSchemeCmd),
            "HeroDefaultEquipCmd" => Some(Self::HeroDefaultEquipCmd),
            "GetItemListCmd" => Some(Self::GetItemListCmd),
            "ItemChangePushCmd" => Some(Self::ItemChangePushCmd),
            "UseItemCmd" => Some(Self::UseItemCmd),
            "UsePowerItemCmd" => Some(Self::UsePowerItemCmd),
            "GetAllMailsCmd" => Some(Self::GetAllMailsCmd),
            "ReadMailCmd" => Some(Self::ReadMailCmd),
            "ReadMailBatchCmd" => Some(Self::ReadMailBatchCmd),
            "NewMailPushCmd" => Some(Self::NewMailPushCmd),
            "DeleteMailsPushCmd" => Some(Self::DeleteMailsPushCmd),
            "DeleteMailBatchCmd" => Some(Self::DeleteMailBatchCmd),
            "MarkMailJumpCmd" => Some(Self::MarkMailJumpCmd),
            "MaterialChangePushCmd" => Some(Self::MaterialChangePushCmd),
            "UpdateOpenPushCmd" => Some(Self::UpdateOpenPushCmd),
            "GetPlayerInfoCmd" => Some(Self::GetPlayerInfoCmd),
            "CreatePlayerCmd" => Some(Self::CreatePlayerCmd),
            "PlayerInfoPushCmd" => Some(Self::PlayerInfoPushCmd),
            "RenameCmd" => Some(Self::RenameCmd),
            "SetSignatureCmd" => Some(Self::SetSignatureCmd),
            "SetBirthdayCmd" => Some(Self::SetBirthdayCmd),
            "SetPortraitCmd" => Some(Self::SetPortraitCmd),
            "SetShowHeroUniqueIdsCmd" => Some(Self::SetShowHeroUniqueIdsCmd),
            "GetSimplePropertyCmd" => Some(Self::GetSimplePropertyCmd),
            "SetSimplePropertyCmd" => Some(Self::SetSimplePropertyCmd),
            "SimplePropertyPushCmd" => Some(Self::SimplePropertyPushCmd),
            "GetClothInfoCmd" => Some(Self::GetClothInfoCmd),
            "ClothUpdatePushCmd" => Some(Self::ClothUpdatePushCmd),
            "ServerResultCodePushCmd" => Some(Self::ServerResultCodePushCmd),
            "GetOtherPlayerInfoCmd" => Some(Self::GetOtherPlayerInfoCmd),
            "SetCharacterAgeCmd" => Some(Self::SetCharacterAgeCmd),
            "UseCdKeyRequsetCmd" => Some(Self::UseCdKeyRequsetCmd),
            "MarkMainThumbnailCmd" => Some(Self::MarkMainThumbnailCmd),
            "GetRedDotInfosCmd" => Some(Self::GetRedDotInfosCmd),
            "UpdateRedDotPushCmd" => Some(Self::UpdateRedDotPushCmd),
            "ShowRedDotCmd" => Some(Self::ShowRedDotCmd),
            "GetRoomInfoCmd" => Some(Self::GetRoomInfoCmd),
            "UseBlockCmd" => Some(Self::UseBlockCmd),
            "ResetRoomCmd" => Some(Self::ResetRoomCmd),
            "UseBuildingCmd" => Some(Self::UseBuildingCmd),
            "UnUseBuildingCmd" => Some(Self::UnUseBuildingCmd),
            "BuildingGainPushCmd" => Some(Self::BuildingGainPushCmd),
            "GetRoomObInfoCmd" => Some(Self::GetRoomObInfoCmd),
            "RoomConfirmCmd" => Some(Self::RoomConfirmCmd),
            "RoomRevertCmd" => Some(Self::RoomRevertCmd),
            "StartProductionLineCmd" => Some(Self::StartProductionLineCmd),
            "GainProductionLineCmd" => Some(Self::GainProductionLineCmd),
            "FormulaGainPushCmd" => Some(Self::FormulaGainPushCmd),
            "ProductionLineLvUpCmd" => Some(Self::ProductionLineLvUpCmd),
            "ProductionLineAccelerateCmd" => Some(Self::ProductionLineAccelerateCmd),
            "GetOtherRoomObInfoCmd" => Some(Self::GetOtherRoomObInfoCmd),
            "RoomLevelUpCmd" => Some(Self::RoomLevelUpCmd),
            "ProductionLineInfoCmd" => Some(Self::ProductionLineInfoCmd),
            "BlockPackageGainPushCmd" => Some(Self::BlockPackageGainPushCmd),
            "GetBlockPackageInfoRequsetCmd" => Some(Self::GetBlockPackageInfoRequsetCmd),
            "GetBuildingInfoCmd" => Some(Self::GetBuildingInfoCmd),
            "UnUseBlockCmd" => Some(Self::UnUseBlockCmd),
            "UpdateRoomHeroDataCmd" => Some(Self::UpdateRoomHeroDataCmd),
            "HideBuildingReddotRequsetCmd" => Some(Self::HideBuildingReddotRequsetCmd),
            "HideBlockPackageReddotCmd" => Some(Self::HideBlockPackageReddotCmd),
            "GainSpecialBlockPushCmd" => Some(Self::GainSpecialBlockPushCmd),
            "GainRoomHeroFaithCmd" => Some(Self::GainRoomHeroFaithCmd),
            "GetCharacterInteractionBonusCmd" => {
                Some(Self::GetCharacterInteractionBonusCmd)
            }
            "GetCharacterInteractionInfoCmd" => {
                Some(Self::GetCharacterInteractionInfoCmd)
            }
            "StartCharacterInteractionCmd" => Some(Self::StartCharacterInteractionCmd),
            "GetSignInInfoCmd" => Some(Self::GetSignInInfoCmd),
            "SignInCmd" => Some(Self::SignInCmd),
            "SignInAddupCmd" => Some(Self::SignInAddupCmd),
            "SignInHistoryCmd" => Some(Self::SignInHistoryCmd),
            "GetHeroBirthdayCmd" => Some(Self::GetHeroBirthdayCmd),
            "ClientStatBaseInfoCmd" => Some(Self::ClientStatBaseInfoCmd),
            "StatInfoPushCmd" => Some(Self::StatInfoPushCmd),
            "UpdateClientStatBaseInfoCmd" => Some(Self::UpdateClientStatBaseInfoCmd),
            "GetStoreInfosCmd" => Some(Self::GetStoreInfosCmd),
            "BuyGoodsCmd" => Some(Self::BuyGoodsCmd),
            "ReadStoreNewCmd" => Some(Self::ReadStoreNewCmd),
            "GetStoryCmd" => Some(Self::GetStoryCmd),
            "UpdateStoryCmd" => Some(Self::UpdateStoryCmd),
            "GetStoryFinishCmd" => Some(Self::GetStoryFinishCmd),
            "StoryFinishPushCmd" => Some(Self::StoryFinishPushCmd),
            "SummonCmd" => Some(Self::SummonCmd),
            "GetSummonInfoCmd" => Some(Self::GetSummonInfoCmd),
            "SummonQueryTokenCmd" => Some(Self::SummonQueryTokenCmd),
            "GetTaskInfoCmd" => Some(Self::GetTaskInfoCmd),
            "FinishTaskCmd" => Some(Self::FinishTaskCmd),
            "UpdateTaskPushCmd" => Some(Self::UpdateTaskPushCmd),
            "DeleteTaskPushCmd" => Some(Self::DeleteTaskPushCmd),
            "GetTaskActivityBonusCmd" => Some(Self::GetTaskActivityBonusCmd),
            "FinishAllTaskCmd" => Some(Self::FinishAllTaskCmd),
            "LogoutCmd" => Some(Self::LogoutCmd),
            "DebugLogoutCmd" => Some(Self::DebugLogoutCmd),
            "GetWeekwalkInfoCmd" => Some(Self::GetWeekwalkInfoCmd),
            "BeforeStartWeekwalkBattleCmd" => Some(Self::BeforeStartWeekwalkBattleCmd),
            "WeekwalkGeneralCmd" => Some(Self::WeekwalkGeneralCmd),
            "WeekwalkInfoUpdatePushCmd" => Some(Self::WeekwalkInfoUpdatePushCmd),
            "WeekwalkDialogCmd" => Some(Self::WeekwalkDialogCmd),
            "WeekwalkHeroRecommendCmd" => Some(Self::WeekwalkHeroRecommendCmd),
            "WeekwalkDialogHistoryCmd" => Some(Self::WeekwalkDialogHistoryCmd),
            "ResetLayerCmd" => Some(Self::ResetLayerCmd),
            "MarkShowBuffCmd" => Some(Self::MarkShowBuffCmd),
            "MarkShowFinishedCmd" => Some(Self::MarkShowFinishedCmd),
            "SelectNotCdHeroCmd" => Some(Self::SelectNotCdHeroCmd),
            "MarkPopDeepRuleCmd" => Some(Self::MarkPopDeepRuleCmd),
            "MarkPopShallowSettleCmd" => Some(Self::MarkPopShallowSettleCmd),
            "MarkPopDeepSettleCmd" => Some(Self::MarkPopDeepSettleCmd),
            "GuestTimeOutPushCmd" => Some(Self::GuestTimeOutPushCmd),
            "MinorPlayTimeOutPushCmd" => Some(Self::MinorPlayTimeOutPushCmd),
            "MinorLimitLoginTimePushCmd" => Some(Self::MinorLimitLoginTimePushCmd),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ActType {
    Skill = 1,
    Buff = 2,
    Effect = 3,
    ChangeHero = 4,
    ChangeWave = 5,
}
impl ActType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Skill => "ActTypeSkill",
            Self::Buff => "ActTypeBuff",
            Self::Effect => "ActTypeEffect",
            Self::ChangeHero => "ActTypeChangeHero",
            Self::ChangeWave => "ActTypeChangeWave",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ActTypeSkill" => Some(Self::Skill),
            "ActTypeBuff" => Some(Self::Buff),
            "ActTypeEffect" => Some(Self::Effect),
            "ActTypeChangeHero" => Some(Self::ChangeHero),
            "ActTypeChangeWave" => Some(Self::ChangeWave),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FightType {
    None = 1,
    Dungeon = 2,
    DungeonRecord = 3,
}
impl FightType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "FightTypeNone",
            Self::Dungeon => "FightTypeDungeon",
            Self::DungeonRecord => "FightTypeDungeonRecord",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FightTypeNone" => Some(Self::None),
            "FightTypeDungeon" => Some(Self::Dungeon),
            "FightTypeDungeonRecord" => Some(Self::DungeonRecord),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResultEnum {
    Ok = 0,
    Failed = 1,
    Unknown = 2,
}
impl ResultEnum {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Ok => "ResultEnumOk",
            Self::Failed => "ResultEnumFailed",
            Self::Unknown => "ResultEnumUnknown",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ResultEnumOk" => Some(Self::Ok),
            "ResultEnumFailed" => Some(Self::Failed),
            "ResultEnumUnknown" => Some(Self::Unknown),
            _ => None,
        }
    }
}
